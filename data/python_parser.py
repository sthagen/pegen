#!/usr/bin/env python3.8
# @generated by pegen from data/python.gram

import ast
import sys
import tokenize

from typing import Any, List, Optional, Set, Tuple

from pegen.parser import memoize, memoize_left_rec, logger, Parser

# TODO: Replace List[Any] with List[NodeType] once recursive type alias are in
NodeType = Tuple[str, int, List[Any]]
class GeneratedParser(Parser):

    @memoize
    def start(self) -> Optional[NodeType]:
        # start: file
        mark = self.mark()
        cut = False
        if (
            (file := self.file())
        ):
            return [file]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def file(self) -> Optional[NodeType]:
        # file: statements? $
        mark = self.mark()
        cut = False
        if (
            (a := self.statements(),)
            and
            (endmarker_ := self.expect('ENDMARKER'))
        ):
            return [a, endmarker_]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def interactive(self) -> Optional[NodeType]:
        # interactive: statement_newline
        mark = self.mark()
        cut = False
        if (
            (a := self.statement_newline())
        ):
            return [a]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def eval(self) -> Optional[NodeType]:
        # eval: expressions NEWLINE* $
        mark = self.mark()
        cut = False
        if (
            (a := self.expressions())
            and
            (_loop0_1 := self._loop0_1(),)
            and
            (endmarker_ := self.expect('ENDMARKER'))
        ):
            return [a, _loop0_1, endmarker_]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def func_type(self) -> Optional[NodeType]:
        # func_type: '(' type_expressions? ')' '->' expression NEWLINE* $
        mark = self.mark()
        cut = False
        if (
            (literal := self.expect('('))
            and
            (a := self.type_expressions(),)
            and
            (literal_1 := self.expect(')'))
            and
            (literal_2 := self.expect('->'))
            and
            (b := self.expression())
            and
            (_loop0_2 := self._loop0_2(),)
            and
            (endmarker_ := self.expect('ENDMARKER'))
        ):
            return [literal, a, literal_1, literal_2, b, _loop0_2, endmarker_]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def fstring(self) -> Optional[NodeType]:
        # fstring: star_expressions
        mark = self.mark()
        cut = False
        if (
            (star_expressions := self.star_expressions())
        ):
            return [star_expressions]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def type_expressions(self) -> Optional[NodeType]:
        # type_expressions: ','.expression+ ',' '*' expression ',' '**' expression | ','.expression+ ',' '*' expression | ','.expression+ ',' '**' expression | '*' expression ',' '**' expression | '*' expression | '**' expression | ','.expression+
        mark = self.mark()
        cut = False
        if (
            (a := self._gather_3())
            and
            (literal := self.expect(','))
            and
            (literal_1 := self.expect('*'))
            and
            (b := self.expression())
            and
            (literal_2 := self.expect(','))
            and
            (literal_3 := self.expect('**'))
            and
            (c := self.expression())
        ):
            return [a, literal, literal_1, b, literal_2, literal_3, c]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (a := self._gather_5())
            and
            (literal := self.expect(','))
            and
            (literal_1 := self.expect('*'))
            and
            (b := self.expression())
        ):
            return [a, literal, literal_1, b]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (a := self._gather_7())
            and
            (literal := self.expect(','))
            and
            (literal_1 := self.expect('**'))
            and
            (b := self.expression())
        ):
            return [a, literal, literal_1, b]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (literal := self.expect('*'))
            and
            (a := self.expression())
            and
            (literal_1 := self.expect(','))
            and
            (literal_2 := self.expect('**'))
            and
            (b := self.expression())
        ):
            return [literal, a, literal_1, literal_2, b]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (literal := self.expect('*'))
            and
            (a := self.expression())
        ):
            return [literal, a]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (literal := self.expect('**'))
            and
            (a := self.expression())
        ):
            return [literal, a]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (_gather_9 := self._gather_9())
        ):
            return [_gather_9]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def statements(self) -> Optional[NodeType]:
        # statements: statement+
        mark = self.mark()
        cut = False
        if (
            (a := self._loop1_11())
        ):
            return [a]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def statement(self) -> Optional[NodeType]:
        # statement: compound_stmt | simple_stmt
        mark = self.mark()
        cut = False
        if (
            (a := self.compound_stmt())
        ):
            return [a]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (simple_stmt := self.simple_stmt())
        ):
            return [simple_stmt]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def statement_newline(self) -> Optional[NodeType]:
        # statement_newline: compound_stmt NEWLINE | simple_stmt | NEWLINE | $
        mark = self.mark()
        cut = False
        if (
            (a := self.compound_stmt())
            and
            (newline_ := self.expect('NEWLINE'))
        ):
            return [a, newline_]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (simple_stmt := self.simple_stmt())
        ):
            return [simple_stmt]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (newline_ := self.expect('NEWLINE'))
        ):
            return [newline_]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (endmarker_ := self.expect('ENDMARKER'))
        ):
            return [endmarker_]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def simple_stmt(self) -> Optional[NodeType]:
        # simple_stmt: small_stmt !';' NEWLINE | ';'.small_stmt+ ';'? NEWLINE
        mark = self.mark()
        cut = False
        if (
            (a := self.small_stmt())
            and
            self.negative_lookahead(self.expect, ';')
            and
            (newline_ := self.expect('NEWLINE'))
        ):
            return [a, newline_]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (a := self._gather_12())
            and
            (opt := self.expect(';'),)
            and
            (newline_ := self.expect('NEWLINE'))
        ):
            return [a, opt, newline_]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def small_stmt(self) -> Optional[NodeType]:
        # small_stmt: assignment | star_expressions | &'return' return_stmt | &('import' | 'from') import_stmt | &'raise' raise_stmt | 'pass' | &'del' del_stmt | &'yield' yield_stmt | &'assert' assert_stmt | 'break' | 'continue' | &'global' global_stmt | &'nonlocal' nonlocal_stmt
        mark = self.mark()
        cut = False
        if (
            (assignment := self.assignment())
        ):
            return [assignment]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (e := self.star_expressions())
        ):
            return [e]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            self.positive_lookahead(self.expect_keyword, 'return')
            and
            (return_stmt := self.return_stmt())
        ):
            return [return_stmt]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            self.positive_lookahead(self._tmp_14, )
            and
            (import_stmt := self.import_stmt())
        ):
            return [import_stmt]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            self.positive_lookahead(self.expect_keyword, 'raise')
            and
            (raise_stmt := self.raise_stmt())
        ):
            return [raise_stmt]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (keyword := self.expect_keyword('pass'))
        ):
            return [keyword]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            self.positive_lookahead(self.expect_keyword, 'del')
            and
            (del_stmt := self.del_stmt())
        ):
            return [del_stmt]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            self.positive_lookahead(self.expect_keyword, 'yield')
            and
            (yield_stmt := self.yield_stmt())
        ):
            return [yield_stmt]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            self.positive_lookahead(self.expect_keyword, 'assert')
            and
            (assert_stmt := self.assert_stmt())
        ):
            return [assert_stmt]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (keyword := self.expect_keyword('break'))
        ):
            return [keyword]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (keyword := self.expect_keyword('continue'))
        ):
            return [keyword]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            self.positive_lookahead(self.expect_keyword, 'global')
            and
            (global_stmt := self.global_stmt())
        ):
            return [global_stmt]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            self.positive_lookahead(self.expect_keyword, 'nonlocal')
            and
            (nonlocal_stmt := self.nonlocal_stmt())
        ):
            return [nonlocal_stmt]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def compound_stmt(self) -> Optional[NodeType]:
        # compound_stmt: &('def' | '@' | ASYNC) function_def | &'if' if_stmt | &('class' | '@') class_def | &('with' | ASYNC) with_stmt | &('for' | ASYNC) for_stmt | &'try' try_stmt | &'while' while_stmt
        mark = self.mark()
        cut = False
        if (
            self.positive_lookahead(self._tmp_15, )
            and
            (function_def := self.function_def())
        ):
            return [function_def]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            self.positive_lookahead(self.expect_keyword, 'if')
            and
            (if_stmt := self.if_stmt())
        ):
            return [if_stmt]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            self.positive_lookahead(self._tmp_16, )
            and
            (class_def := self.class_def())
        ):
            return [class_def]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            self.positive_lookahead(self._tmp_17, )
            and
            (with_stmt := self.with_stmt())
        ):
            return [with_stmt]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            self.positive_lookahead(self._tmp_18, )
            and
            (for_stmt := self.for_stmt())
        ):
            return [for_stmt]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            self.positive_lookahead(self.expect_keyword, 'try')
            and
            (try_stmt := self.try_stmt())
        ):
            return [try_stmt]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            self.positive_lookahead(self.expect_keyword, 'while')
            and
            (while_stmt := self.while_stmt())
        ):
            return [while_stmt]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def assignment(self) -> Optional[NodeType]:
        # assignment: NAME ':' expression ['=' annotated_rhs] | ('(' single_target ')' | single_subscript_attribute_target) ':' expression ['=' annotated_rhs] | ((star_targets '='))+ (yield_expr | star_expressions) !'=' TYPE_COMMENT? | single_target augassign ~ (yield_expr | star_expressions) | invalid_assignment
        mark = self.mark()
        cut = False
        if (
            (a := self.name())
            and
            (literal := self.expect(':'))
            and
            (b := self.expression())
            and
            (c := self._tmp_19(),)
        ):
            return [a, literal, b, c]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (a := self._tmp_20())
            and
            (literal := self.expect(':'))
            and
            (b := self.expression())
            and
            (c := self._tmp_21(),)
        ):
            return [a, literal, b, c]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (a := self._loop1_22())
            and
            (b := self._tmp_23())
            and
            self.negative_lookahead(self.expect, '=')
            and
            (tc := self.expect('TYPE_COMMENT'),)
        ):
            return [a, b, tc]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (a := self.single_target())
            and
            (b := self.augassign())
            and
            (cut := True)
            and
            (c := self._tmp_24())
        ):
            return [a, b, c]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (invalid_assignment := self.invalid_assignment())
        ):
            return [invalid_assignment]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def augassign(self) -> Optional[NodeType]:
        # augassign: '+=' | '-=' | '*=' | '@=' | '/=' | '%=' | '&=' | '|=' | '^=' | '<<=' | '>>=' | '**=' | '//='
        mark = self.mark()
        cut = False
        if (
            (literal := self.expect('+='))
        ):
            return [literal]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (literal := self.expect('-='))
        ):
            return [literal]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (literal := self.expect('*='))
        ):
            return [literal]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (literal := self.expect('@='))
        ):
            return [literal]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (literal := self.expect('/='))
        ):
            return [literal]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (literal := self.expect('%='))
        ):
            return [literal]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (literal := self.expect('&='))
        ):
            return [literal]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (literal := self.expect('|='))
        ):
            return [literal]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (literal := self.expect('^='))
        ):
            return [literal]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (literal := self.expect('<<='))
        ):
            return [literal]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (literal := self.expect('>>='))
        ):
            return [literal]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (literal := self.expect('**='))
        ):
            return [literal]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (literal := self.expect('//='))
        ):
            return [literal]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def global_stmt(self) -> Optional[NodeType]:
        # global_stmt: 'global' ','.NAME+
        mark = self.mark()
        cut = False
        if (
            (keyword := self.expect_keyword('global'))
            and
            (a := self._gather_25())
        ):
            return [keyword, a]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def nonlocal_stmt(self) -> Optional[NodeType]:
        # nonlocal_stmt: 'nonlocal' ','.NAME+
        mark = self.mark()
        cut = False
        if (
            (keyword := self.expect_keyword('nonlocal'))
            and
            (a := self._gather_27())
        ):
            return [keyword, a]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def yield_stmt(self) -> Optional[NodeType]:
        # yield_stmt: yield_expr
        mark = self.mark()
        cut = False
        if (
            (y := self.yield_expr())
        ):
            return [y]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def assert_stmt(self) -> Optional[NodeType]:
        # assert_stmt: 'assert' expression [',' expression]
        mark = self.mark()
        cut = False
        if (
            (keyword := self.expect_keyword('assert'))
            and
            (a := self.expression())
            and
            (b := self._tmp_29(),)
        ):
            return [keyword, a, b]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def del_stmt(self) -> Optional[NodeType]:
        # del_stmt: 'del' del_targets &(';' | NEWLINE) | invalid_del_stmt
        mark = self.mark()
        cut = False
        if (
            (keyword := self.expect_keyword('del'))
            and
            (a := self.del_targets())
            and
            self.positive_lookahead(self._tmp_30, )
        ):
            return [keyword, a]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (invalid_del_stmt := self.invalid_del_stmt())
        ):
            return [invalid_del_stmt]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def import_stmt(self) -> Optional[NodeType]:
        # import_stmt: import_name | import_from
        mark = self.mark()
        cut = False
        if (
            (import_name := self.import_name())
        ):
            return [import_name]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (import_from := self.import_from())
        ):
            return [import_from]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def import_name(self) -> Optional[NodeType]:
        # import_name: 'import' dotted_as_names
        mark = self.mark()
        cut = False
        if (
            (keyword := self.expect_keyword('import'))
            and
            (a := self.dotted_as_names())
        ):
            return [keyword, a]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def import_from(self) -> Optional[NodeType]:
        # import_from: 'from' (('.' | '...'))* dotted_name 'import' import_from_targets | 'from' (('.' | '...'))+ 'import' import_from_targets
        mark = self.mark()
        cut = False
        if (
            (keyword := self.expect_keyword('from'))
            and
            (a := self._loop0_31(),)
            and
            (b := self.dotted_name())
            and
            (keyword_1 := self.expect_keyword('import'))
            and
            (c := self.import_from_targets())
        ):
            return [keyword, a, b, keyword_1, c]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (keyword := self.expect_keyword('from'))
            and
            (a := self._loop1_32())
            and
            (keyword_1 := self.expect_keyword('import'))
            and
            (b := self.import_from_targets())
        ):
            return [keyword, a, keyword_1, b]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def import_from_targets(self) -> Optional[NodeType]:
        # import_from_targets: '(' import_from_as_names ','? ')' | import_from_as_names !',' | '*' | invalid_import_from_targets
        mark = self.mark()
        cut = False
        if (
            (literal := self.expect('('))
            and
            (a := self.import_from_as_names())
            and
            (opt := self.expect(','),)
            and
            (literal_1 := self.expect(')'))
        ):
            return [literal, a, opt, literal_1]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (import_from_as_names := self.import_from_as_names())
            and
            self.negative_lookahead(self.expect, ',')
        ):
            return [import_from_as_names]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (literal := self.expect('*'))
        ):
            return [literal]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (invalid_import_from_targets := self.invalid_import_from_targets())
        ):
            return [invalid_import_from_targets]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def import_from_as_names(self) -> Optional[NodeType]:
        # import_from_as_names: ','.import_from_as_name+
        mark = self.mark()
        cut = False
        if (
            (a := self._gather_33())
        ):
            return [a]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def import_from_as_name(self) -> Optional[NodeType]:
        # import_from_as_name: NAME ['as' NAME]
        mark = self.mark()
        cut = False
        if (
            (a := self.name())
            and
            (b := self._tmp_35(),)
        ):
            return [a, b]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def dotted_as_names(self) -> Optional[NodeType]:
        # dotted_as_names: ','.dotted_as_name+
        mark = self.mark()
        cut = False
        if (
            (a := self._gather_36())
        ):
            return [a]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def dotted_as_name(self) -> Optional[NodeType]:
        # dotted_as_name: dotted_name ['as' NAME]
        mark = self.mark()
        cut = False
        if (
            (a := self.dotted_name())
            and
            (b := self._tmp_38(),)
        ):
            return [a, b]
        self.reset(mark)
        if cut: return None
        return None

    @memoize_left_rec
    def dotted_name(self) -> Optional[NodeType]:
        # dotted_name: dotted_name '.' NAME | NAME
        mark = self.mark()
        cut = False
        if (
            (a := self.dotted_name())
            and
            (literal := self.expect('.'))
            and
            (b := self.name())
        ):
            return [a, literal, b]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (name_ := self.name())
        ):
            return [name_]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def if_stmt(self) -> Optional[NodeType]:
        # if_stmt: 'if' named_expression ':' block elif_stmt | 'if' named_expression ':' block else_block?
        mark = self.mark()
        cut = False
        if (
            (keyword := self.expect_keyword('if'))
            and
            (a := self.named_expression())
            and
            (literal := self.expect(':'))
            and
            (b := self.block())
            and
            (c := self.elif_stmt())
        ):
            return [keyword, a, literal, b, c]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (keyword := self.expect_keyword('if'))
            and
            (a := self.named_expression())
            and
            (literal := self.expect(':'))
            and
            (b := self.block())
            and
            (c := self.else_block(),)
        ):
            return [keyword, a, literal, b, c]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def elif_stmt(self) -> Optional[NodeType]:
        # elif_stmt: 'elif' named_expression ':' block elif_stmt | 'elif' named_expression ':' block else_block?
        mark = self.mark()
        cut = False
        if (
            (keyword := self.expect_keyword('elif'))
            and
            (a := self.named_expression())
            and
            (literal := self.expect(':'))
            and
            (b := self.block())
            and
            (c := self.elif_stmt())
        ):
            return [keyword, a, literal, b, c]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (keyword := self.expect_keyword('elif'))
            and
            (a := self.named_expression())
            and
            (literal := self.expect(':'))
            and
            (b := self.block())
            and
            (c := self.else_block(),)
        ):
            return [keyword, a, literal, b, c]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def else_block(self) -> Optional[NodeType]:
        # else_block: 'else' ':' block
        mark = self.mark()
        cut = False
        if (
            (keyword := self.expect_keyword('else'))
            and
            (literal := self.expect(':'))
            and
            (b := self.block())
        ):
            return [keyword, literal, b]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def while_stmt(self) -> Optional[NodeType]:
        # while_stmt: 'while' named_expression ':' block else_block?
        mark = self.mark()
        cut = False
        if (
            (keyword := self.expect_keyword('while'))
            and
            (a := self.named_expression())
            and
            (literal := self.expect(':'))
            and
            (b := self.block())
            and
            (c := self.else_block(),)
        ):
            return [keyword, a, literal, b, c]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def for_stmt(self) -> Optional[NodeType]:
        # for_stmt: 'for' star_targets 'in' ~ star_expressions ':' TYPE_COMMENT? block else_block? | ASYNC 'for' star_targets 'in' ~ star_expressions ':' TYPE_COMMENT? block else_block? | invalid_for_target
        mark = self.mark()
        cut = False
        if (
            (keyword := self.expect_keyword('for'))
            and
            (t := self.star_targets())
            and
            (keyword_1 := self.expect_keyword('in'))
            and
            (cut := True)
            and
            (ex := self.star_expressions())
            and
            (literal := self.expect(':'))
            and
            (tc := self.expect('TYPE_COMMENT'),)
            and
            (b := self.block())
            and
            (el := self.else_block(),)
        ):
            return [keyword, t, keyword_1, ex, literal, tc, b, el]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (async_ := self.expect('ASYNC'))
            and
            (keyword := self.expect_keyword('for'))
            and
            (t := self.star_targets())
            and
            (keyword_1 := self.expect_keyword('in'))
            and
            (cut := True)
            and
            (ex := self.star_expressions())
            and
            (literal := self.expect(':'))
            and
            (tc := self.expect('TYPE_COMMENT'),)
            and
            (b := self.block())
            and
            (el := self.else_block(),)
        ):
            return [async_, keyword, t, keyword_1, ex, literal, tc, b, el]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (invalid_for_target := self.invalid_for_target())
        ):
            return [invalid_for_target]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def with_stmt(self) -> Optional[NodeType]:
        # with_stmt: 'with' '(' ','.with_item+ ','? ')' ':' block | 'with' ','.with_item+ ':' TYPE_COMMENT? block | ASYNC 'with' '(' ','.with_item+ ','? ')' ':' block | ASYNC 'with' ','.with_item+ ':' TYPE_COMMENT? block
        mark = self.mark()
        cut = False
        if (
            (keyword := self.expect_keyword('with'))
            and
            (literal := self.expect('('))
            and
            (a := self._gather_39())
            and
            (opt := self.expect(','),)
            and
            (literal_1 := self.expect(')'))
            and
            (literal_2 := self.expect(':'))
            and
            (b := self.block())
        ):
            return [keyword, literal, a, opt, literal_1, literal_2, b]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (keyword := self.expect_keyword('with'))
            and
            (a := self._gather_41())
            and
            (literal := self.expect(':'))
            and
            (tc := self.expect('TYPE_COMMENT'),)
            and
            (b := self.block())
        ):
            return [keyword, a, literal, tc, b]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (async_ := self.expect('ASYNC'))
            and
            (keyword := self.expect_keyword('with'))
            and
            (literal := self.expect('('))
            and
            (a := self._gather_43())
            and
            (opt := self.expect(','),)
            and
            (literal_1 := self.expect(')'))
            and
            (literal_2 := self.expect(':'))
            and
            (b := self.block())
        ):
            return [async_, keyword, literal, a, opt, literal_1, literal_2, b]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (async_ := self.expect('ASYNC'))
            and
            (keyword := self.expect_keyword('with'))
            and
            (a := self._gather_45())
            and
            (literal := self.expect(':'))
            and
            (tc := self.expect('TYPE_COMMENT'),)
            and
            (b := self.block())
        ):
            return [async_, keyword, a, literal, tc, b]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def with_item(self) -> Optional[NodeType]:
        # with_item: expression 'as' target &(',' | ')' | ':') | invalid_with_item | expression
        mark = self.mark()
        cut = False
        if (
            (e := self.expression())
            and
            (keyword := self.expect_keyword('as'))
            and
            (t := self.target())
            and
            self.positive_lookahead(self._tmp_47, )
        ):
            return [e, keyword, t]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (invalid_with_item := self.invalid_with_item())
        ):
            return [invalid_with_item]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (e := self.expression())
        ):
            return [e]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def try_stmt(self) -> Optional[NodeType]:
        # try_stmt: 'try' ':' block finally_block | 'try' ':' block except_block+ else_block? finally_block?
        mark = self.mark()
        cut = False
        if (
            (keyword := self.expect_keyword('try'))
            and
            (literal := self.expect(':'))
            and
            (b := self.block())
            and
            (f := self.finally_block())
        ):
            return [keyword, literal, b, f]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (keyword := self.expect_keyword('try'))
            and
            (literal := self.expect(':'))
            and
            (b := self.block())
            and
            (ex := self._loop1_48())
            and
            (el := self.else_block(),)
            and
            (f := self.finally_block(),)
        ):
            return [keyword, literal, b, ex, el, f]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def except_block(self) -> Optional[NodeType]:
        # except_block: 'except' expression ['as' NAME] ':' block | 'except' ':' block
        mark = self.mark()
        cut = False
        if (
            (keyword := self.expect_keyword('except'))
            and
            (e := self.expression())
            and
            (t := self._tmp_49(),)
            and
            (literal := self.expect(':'))
            and
            (b := self.block())
        ):
            return [keyword, e, t, literal, b]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (keyword := self.expect_keyword('except'))
            and
            (literal := self.expect(':'))
            and
            (b := self.block())
        ):
            return [keyword, literal, b]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def finally_block(self) -> Optional[NodeType]:
        # finally_block: 'finally' ':' block
        mark = self.mark()
        cut = False
        if (
            (keyword := self.expect_keyword('finally'))
            and
            (literal := self.expect(':'))
            and
            (a := self.block())
        ):
            return [keyword, literal, a]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def return_stmt(self) -> Optional[NodeType]:
        # return_stmt: 'return' star_expressions?
        mark = self.mark()
        cut = False
        if (
            (keyword := self.expect_keyword('return'))
            and
            (a := self.star_expressions(),)
        ):
            return [keyword, a]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def raise_stmt(self) -> Optional[NodeType]:
        # raise_stmt: 'raise' expression ['from' expression] | 'raise'
        mark = self.mark()
        cut = False
        if (
            (keyword := self.expect_keyword('raise'))
            and
            (a := self.expression())
            and
            (b := self._tmp_50(),)
        ):
            return [keyword, a, b]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (keyword := self.expect_keyword('raise'))
        ):
            return [keyword]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def function_def(self) -> Optional[NodeType]:
        # function_def: decorators function_def_raw | function_def_raw
        mark = self.mark()
        cut = False
        if (
            (d := self.decorators())
            and
            (f := self.function_def_raw())
        ):
            return [d, f]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (function_def_raw := self.function_def_raw())
        ):
            return [function_def_raw]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def function_def_raw(self) -> Optional[NodeType]:
        # function_def_raw: 'def' NAME '(' params? ')' ['->' expression] ':' func_type_comment? block | ASYNC 'def' NAME '(' params? ')' ['->' expression] ':' func_type_comment? block
        mark = self.mark()
        cut = False
        if (
            (keyword := self.expect_keyword('def'))
            and
            (n := self.name())
            and
            (literal := self.expect('('))
            and
            (params := self.params(),)
            and
            (literal_1 := self.expect(')'))
            and
            (a := self._tmp_51(),)
            and
            (literal_2 := self.expect(':'))
            and
            (tc := self.func_type_comment(),)
            and
            (b := self.block())
        ):
            return [keyword, n, literal, params, literal_1, a, literal_2, tc, b]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (async_ := self.expect('ASYNC'))
            and
            (keyword := self.expect_keyword('def'))
            and
            (n := self.name())
            and
            (literal := self.expect('('))
            and
            (params := self.params(),)
            and
            (literal_1 := self.expect(')'))
            and
            (a := self._tmp_52(),)
            and
            (literal_2 := self.expect(':'))
            and
            (tc := self.func_type_comment(),)
            and
            (b := self.block())
        ):
            return [async_, keyword, n, literal, params, literal_1, a, literal_2, tc, b]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def func_type_comment(self) -> Optional[NodeType]:
        # func_type_comment: NEWLINE TYPE_COMMENT &(NEWLINE INDENT) | invalid_double_type_comments | TYPE_COMMENT
        mark = self.mark()
        cut = False
        if (
            (newline_ := self.expect('NEWLINE'))
            and
            (t := self.expect('TYPE_COMMENT'))
            and
            self.positive_lookahead(self._tmp_53, )
        ):
            return [newline_, t]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (invalid_double_type_comments := self.invalid_double_type_comments())
        ):
            return [invalid_double_type_comments]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (type_comment_ := self.expect('TYPE_COMMENT'))
        ):
            return [type_comment_]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def params(self) -> Optional[NodeType]:
        # params: invalid_parameters | parameters
        mark = self.mark()
        cut = False
        if (
            (invalid_parameters := self.invalid_parameters())
        ):
            return [invalid_parameters]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (parameters := self.parameters())
        ):
            return [parameters]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def parameters(self) -> Optional[NodeType]:
        # parameters: slash_no_default param_no_default* param_with_default* star_etc? | slash_with_default param_with_default* star_etc? | param_no_default+ param_with_default* star_etc? | param_with_default+ star_etc? | star_etc
        mark = self.mark()
        cut = False
        if (
            (a := self.slash_no_default())
            and
            (b := self._loop0_54(),)
            and
            (c := self._loop0_55(),)
            and
            (d := self.star_etc(),)
        ):
            return [a, b, c, d]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (a := self.slash_with_default())
            and
            (b := self._loop0_56(),)
            and
            (c := self.star_etc(),)
        ):
            return [a, b, c]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (a := self._loop1_57())
            and
            (b := self._loop0_58(),)
            and
            (c := self.star_etc(),)
        ):
            return [a, b, c]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (a := self._loop1_59())
            and
            (b := self.star_etc(),)
        ):
            return [a, b]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (a := self.star_etc())
        ):
            return [a]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def slash_no_default(self) -> Optional[NodeType]:
        # slash_no_default: param_no_default+ '/' ',' | param_no_default+ '/' &')'
        mark = self.mark()
        cut = False
        if (
            (a := self._loop1_60())
            and
            (literal := self.expect('/'))
            and
            (literal_1 := self.expect(','))
        ):
            return [a, literal, literal_1]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (a := self._loop1_61())
            and
            (literal := self.expect('/'))
            and
            self.positive_lookahead(self.expect, ')')
        ):
            return [a, literal]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def slash_with_default(self) -> Optional[NodeType]:
        # slash_with_default: param_no_default* param_with_default+ '/' ',' | param_no_default* param_with_default+ '/' &')'
        mark = self.mark()
        cut = False
        if (
            (a := self._loop0_62(),)
            and
            (b := self._loop1_63())
            and
            (literal := self.expect('/'))
            and
            (literal_1 := self.expect(','))
        ):
            return [a, b, literal, literal_1]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (a := self._loop0_64(),)
            and
            (b := self._loop1_65())
            and
            (literal := self.expect('/'))
            and
            self.positive_lookahead(self.expect, ')')
        ):
            return [a, b, literal]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def star_etc(self) -> Optional[NodeType]:
        # star_etc: '*' param_no_default param_maybe_default* kwds? | '*' ',' param_maybe_default+ kwds? | kwds | invalid_star_etc
        mark = self.mark()
        cut = False
        if (
            (literal := self.expect('*'))
            and
            (a := self.param_no_default())
            and
            (b := self._loop0_66(),)
            and
            (c := self.kwds(),)
        ):
            return [literal, a, b, c]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (literal := self.expect('*'))
            and
            (literal_1 := self.expect(','))
            and
            (b := self._loop1_67())
            and
            (c := self.kwds(),)
        ):
            return [literal, literal_1, b, c]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (a := self.kwds())
        ):
            return [a]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (invalid_star_etc := self.invalid_star_etc())
        ):
            return [invalid_star_etc]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def kwds(self) -> Optional[NodeType]:
        # kwds: '**' param_no_default
        mark = self.mark()
        cut = False
        if (
            (literal := self.expect('**'))
            and
            (a := self.param_no_default())
        ):
            return [literal, a]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def param_no_default(self) -> Optional[NodeType]:
        # param_no_default: param ',' TYPE_COMMENT? | param TYPE_COMMENT? &')'
        mark = self.mark()
        cut = False
        if (
            (a := self.param())
            and
            (literal := self.expect(','))
            and
            (tc := self.expect('TYPE_COMMENT'),)
        ):
            return [a, literal, tc]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (a := self.param())
            and
            (tc := self.expect('TYPE_COMMENT'),)
            and
            self.positive_lookahead(self.expect, ')')
        ):
            return [a, tc]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def param_with_default(self) -> Optional[NodeType]:
        # param_with_default: param default ',' TYPE_COMMENT? | param default TYPE_COMMENT? &')'
        mark = self.mark()
        cut = False
        if (
            (a := self.param())
            and
            (c := self.default())
            and
            (literal := self.expect(','))
            and
            (tc := self.expect('TYPE_COMMENT'),)
        ):
            return [a, c, literal, tc]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (a := self.param())
            and
            (c := self.default())
            and
            (tc := self.expect('TYPE_COMMENT'),)
            and
            self.positive_lookahead(self.expect, ')')
        ):
            return [a, c, tc]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def param_maybe_default(self) -> Optional[NodeType]:
        # param_maybe_default: param default? ',' TYPE_COMMENT? | param default? TYPE_COMMENT? &')'
        mark = self.mark()
        cut = False
        if (
            (a := self.param())
            and
            (c := self.default(),)
            and
            (literal := self.expect(','))
            and
            (tc := self.expect('TYPE_COMMENT'),)
        ):
            return [a, c, literal, tc]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (a := self.param())
            and
            (c := self.default(),)
            and
            (tc := self.expect('TYPE_COMMENT'),)
            and
            self.positive_lookahead(self.expect, ')')
        ):
            return [a, c, tc]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def param(self) -> Optional[NodeType]:
        # param: NAME annotation?
        mark = self.mark()
        cut = False
        if (
            (a := self.name())
            and
            (b := self.annotation(),)
        ):
            return [a, b]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def annotation(self) -> Optional[NodeType]:
        # annotation: ':' expression
        mark = self.mark()
        cut = False
        if (
            (literal := self.expect(':'))
            and
            (a := self.expression())
        ):
            return [literal, a]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def default(self) -> Optional[NodeType]:
        # default: '=' expression
        mark = self.mark()
        cut = False
        if (
            (literal := self.expect('='))
            and
            (a := self.expression())
        ):
            return [literal, a]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def decorators(self) -> Optional[NodeType]:
        # decorators: (('@' named_expression NEWLINE))+
        mark = self.mark()
        cut = False
        if (
            (a := self._loop1_68())
        ):
            return [a]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def class_def(self) -> Optional[NodeType]:
        # class_def: decorators class_def_raw | class_def_raw
        mark = self.mark()
        cut = False
        if (
            (a := self.decorators())
            and
            (b := self.class_def_raw())
        ):
            return [a, b]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (class_def_raw := self.class_def_raw())
        ):
            return [class_def_raw]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def class_def_raw(self) -> Optional[NodeType]:
        # class_def_raw: 'class' NAME ['(' arguments? ')'] ':' block
        mark = self.mark()
        cut = False
        if (
            (keyword := self.expect_keyword('class'))
            and
            (a := self.name())
            and
            (b := self._tmp_69(),)
            and
            (literal := self.expect(':'))
            and
            (c := self.block())
        ):
            return [keyword, a, b, literal, c]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def block(self) -> Optional[NodeType]:
        # block: NEWLINE INDENT statements DEDENT | simple_stmt | invalid_block
        mark = self.mark()
        cut = False
        if (
            (newline_ := self.expect('NEWLINE'))
            and
            (indent_ := self.expect('INDENT'))
            and
            (a := self.statements())
            and
            (dedent_ := self.expect('DEDENT'))
        ):
            return [newline_, indent_, a, dedent_]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (simple_stmt := self.simple_stmt())
        ):
            return [simple_stmt]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (invalid_block := self.invalid_block())
        ):
            return [invalid_block]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def expressions_list(self) -> Optional[NodeType]:
        # expressions_list: ','.star_expression+ ','?
        mark = self.mark()
        cut = False
        if (
            (a := self._gather_70())
            and
            (opt := self.expect(','),)
        ):
            return [a, opt]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def star_expressions(self) -> Optional[NodeType]:
        # star_expressions: star_expression ((',' star_expression))+ ','? | star_expression ',' | star_expression
        mark = self.mark()
        cut = False
        if (
            (a := self.star_expression())
            and
            (b := self._loop1_72())
            and
            (opt := self.expect(','),)
        ):
            return [a, b, opt]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (a := self.star_expression())
            and
            (literal := self.expect(','))
        ):
            return [a, literal]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (star_expression := self.star_expression())
        ):
            return [star_expression]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def star_expression(self) -> Optional[NodeType]:
        # star_expression: '*' bitwise_or | expression
        mark = self.mark()
        cut = False
        if (
            (literal := self.expect('*'))
            and
            (a := self.bitwise_or())
        ):
            return [literal, a]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (expression := self.expression())
        ):
            return [expression]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def star_named_expressions(self) -> Optional[NodeType]:
        # star_named_expressions: ','.star_named_expression+ ','?
        mark = self.mark()
        cut = False
        if (
            (a := self._gather_73())
            and
            (opt := self.expect(','),)
        ):
            return [a, opt]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def star_named_expression(self) -> Optional[NodeType]:
        # star_named_expression: '*' bitwise_or | named_expression
        mark = self.mark()
        cut = False
        if (
            (literal := self.expect('*'))
            and
            (a := self.bitwise_or())
        ):
            return [literal, a]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (named_expression := self.named_expression())
        ):
            return [named_expression]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def named_expression(self) -> Optional[NodeType]:
        # named_expression: NAME ':=' ~ expression | expression !':=' | invalid_named_expression
        mark = self.mark()
        cut = False
        if (
            (a := self.name())
            and
            (literal := self.expect(':='))
            and
            (cut := True)
            and
            (b := self.expression())
        ):
            return [a, literal, b]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (expression := self.expression())
            and
            self.negative_lookahead(self.expect, ':=')
        ):
            return [expression]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (invalid_named_expression := self.invalid_named_expression())
        ):
            return [invalid_named_expression]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def annotated_rhs(self) -> Optional[NodeType]:
        # annotated_rhs: yield_expr | star_expressions
        mark = self.mark()
        cut = False
        if (
            (yield_expr := self.yield_expr())
        ):
            return [yield_expr]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (star_expressions := self.star_expressions())
        ):
            return [star_expressions]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def expressions(self) -> Optional[NodeType]:
        # expressions: expression ((',' expression))+ ','? | expression ',' | expression
        mark = self.mark()
        cut = False
        if (
            (a := self.expression())
            and
            (b := self._loop1_75())
            and
            (opt := self.expect(','),)
        ):
            return [a, b, opt]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (a := self.expression())
            and
            (literal := self.expect(','))
        ):
            return [a, literal]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (expression := self.expression())
        ):
            return [expression]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def expression(self) -> Optional[NodeType]:
        # expression: disjunction 'if' disjunction 'else' expression | disjunction | lambdef
        mark = self.mark()
        cut = False
        if (
            (a := self.disjunction())
            and
            (keyword := self.expect_keyword('if'))
            and
            (b := self.disjunction())
            and
            (keyword_1 := self.expect_keyword('else'))
            and
            (c := self.expression())
        ):
            return [a, keyword, b, keyword_1, c]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (disjunction := self.disjunction())
        ):
            return [disjunction]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (lambdef := self.lambdef())
        ):
            return [lambdef]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def lambdef(self) -> Optional[NodeType]:
        # lambdef: 'lambda' lambda_params? ':' expression
        mark = self.mark()
        cut = False
        if (
            (keyword := self.expect_keyword('lambda'))
            and
            (a := self.lambda_params(),)
            and
            (literal := self.expect(':'))
            and
            (b := self.expression())
        ):
            return [keyword, a, literal, b]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def lambda_params(self) -> Optional[NodeType]:
        # lambda_params: invalid_lambda_parameters | lambda_parameters
        mark = self.mark()
        cut = False
        if (
            (invalid_lambda_parameters := self.invalid_lambda_parameters())
        ):
            return [invalid_lambda_parameters]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (lambda_parameters := self.lambda_parameters())
        ):
            return [lambda_parameters]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def lambda_parameters(self) -> Optional[NodeType]:
        # lambda_parameters: lambda_slash_no_default lambda_param_no_default* lambda_param_with_default* lambda_star_etc? | lambda_slash_with_default lambda_param_with_default* lambda_star_etc? | lambda_param_no_default+ lambda_param_with_default* lambda_star_etc? | lambda_param_with_default+ lambda_star_etc? | lambda_star_etc
        mark = self.mark()
        cut = False
        if (
            (a := self.lambda_slash_no_default())
            and
            (b := self._loop0_76(),)
            and
            (c := self._loop0_77(),)
            and
            (d := self.lambda_star_etc(),)
        ):
            return [a, b, c, d]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (a := self.lambda_slash_with_default())
            and
            (b := self._loop0_78(),)
            and
            (c := self.lambda_star_etc(),)
        ):
            return [a, b, c]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (a := self._loop1_79())
            and
            (b := self._loop0_80(),)
            and
            (c := self.lambda_star_etc(),)
        ):
            return [a, b, c]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (a := self._loop1_81())
            and
            (b := self.lambda_star_etc(),)
        ):
            return [a, b]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (a := self.lambda_star_etc())
        ):
            return [a]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def lambda_slash_no_default(self) -> Optional[NodeType]:
        # lambda_slash_no_default: lambda_param_no_default+ '/' ',' | lambda_param_no_default+ '/' &':'
        mark = self.mark()
        cut = False
        if (
            (a := self._loop1_82())
            and
            (literal := self.expect('/'))
            and
            (literal_1 := self.expect(','))
        ):
            return [a, literal, literal_1]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (a := self._loop1_83())
            and
            (literal := self.expect('/'))
            and
            self.positive_lookahead(self.expect, ':')
        ):
            return [a, literal]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def lambda_slash_with_default(self) -> Optional[NodeType]:
        # lambda_slash_with_default: lambda_param_no_default* lambda_param_with_default+ '/' ',' | lambda_param_no_default* lambda_param_with_default+ '/' &':'
        mark = self.mark()
        cut = False
        if (
            (a := self._loop0_84(),)
            and
            (b := self._loop1_85())
            and
            (literal := self.expect('/'))
            and
            (literal_1 := self.expect(','))
        ):
            return [a, b, literal, literal_1]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (a := self._loop0_86(),)
            and
            (b := self._loop1_87())
            and
            (literal := self.expect('/'))
            and
            self.positive_lookahead(self.expect, ':')
        ):
            return [a, b, literal]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def lambda_star_etc(self) -> Optional[NodeType]:
        # lambda_star_etc: '*' lambda_param_no_default lambda_param_maybe_default* lambda_kwds? | '*' ',' lambda_param_maybe_default+ lambda_kwds? | lambda_kwds | invalid_lambda_star_etc
        mark = self.mark()
        cut = False
        if (
            (literal := self.expect('*'))
            and
            (a := self.lambda_param_no_default())
            and
            (b := self._loop0_88(),)
            and
            (c := self.lambda_kwds(),)
        ):
            return [literal, a, b, c]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (literal := self.expect('*'))
            and
            (literal_1 := self.expect(','))
            and
            (b := self._loop1_89())
            and
            (c := self.lambda_kwds(),)
        ):
            return [literal, literal_1, b, c]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (a := self.lambda_kwds())
        ):
            return [a]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (invalid_lambda_star_etc := self.invalid_lambda_star_etc())
        ):
            return [invalid_lambda_star_etc]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def lambda_kwds(self) -> Optional[NodeType]:
        # lambda_kwds: '**' lambda_param_no_default
        mark = self.mark()
        cut = False
        if (
            (literal := self.expect('**'))
            and
            (a := self.lambda_param_no_default())
        ):
            return [literal, a]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def lambda_param_no_default(self) -> Optional[NodeType]:
        # lambda_param_no_default: lambda_param ',' | lambda_param &':'
        mark = self.mark()
        cut = False
        if (
            (a := self.lambda_param())
            and
            (literal := self.expect(','))
        ):
            return [a, literal]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (a := self.lambda_param())
            and
            self.positive_lookahead(self.expect, ':')
        ):
            return [a]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def lambda_param_with_default(self) -> Optional[NodeType]:
        # lambda_param_with_default: lambda_param default ',' | lambda_param default &':'
        mark = self.mark()
        cut = False
        if (
            (a := self.lambda_param())
            and
            (c := self.default())
            and
            (literal := self.expect(','))
        ):
            return [a, c, literal]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (a := self.lambda_param())
            and
            (c := self.default())
            and
            self.positive_lookahead(self.expect, ':')
        ):
            return [a, c]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def lambda_param_maybe_default(self) -> Optional[NodeType]:
        # lambda_param_maybe_default: lambda_param default? ',' | lambda_param default? &':'
        mark = self.mark()
        cut = False
        if (
            (a := self.lambda_param())
            and
            (c := self.default(),)
            and
            (literal := self.expect(','))
        ):
            return [a, c, literal]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (a := self.lambda_param())
            and
            (c := self.default(),)
            and
            self.positive_lookahead(self.expect, ':')
        ):
            return [a, c]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def lambda_param(self) -> Optional[NodeType]:
        # lambda_param: NAME
        mark = self.mark()
        cut = False
        if (
            (a := self.name())
        ):
            return [a]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def disjunction(self) -> Optional[NodeType]:
        # disjunction: conjunction (('or' conjunction))+ | conjunction
        mark = self.mark()
        cut = False
        if (
            (a := self.conjunction())
            and
            (b := self._loop1_90())
        ):
            return [a, b]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (conjunction := self.conjunction())
        ):
            return [conjunction]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def conjunction(self) -> Optional[NodeType]:
        # conjunction: inversion (('and' inversion))+ | inversion
        mark = self.mark()
        cut = False
        if (
            (a := self.inversion())
            and
            (b := self._loop1_91())
        ):
            return [a, b]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (inversion := self.inversion())
        ):
            return [inversion]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def inversion(self) -> Optional[NodeType]:
        # inversion: 'not' inversion | comparison
        mark = self.mark()
        cut = False
        if (
            (keyword := self.expect_keyword('not'))
            and
            (a := self.inversion())
        ):
            return [keyword, a]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (comparison := self.comparison())
        ):
            return [comparison]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def comparison(self) -> Optional[NodeType]:
        # comparison: bitwise_or compare_op_bitwise_or_pair+ | bitwise_or
        mark = self.mark()
        cut = False
        if (
            (a := self.bitwise_or())
            and
            (b := self._loop1_92())
        ):
            return [a, b]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (bitwise_or := self.bitwise_or())
        ):
            return [bitwise_or]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def compare_op_bitwise_or_pair(self) -> Optional[NodeType]:
        # compare_op_bitwise_or_pair: eq_bitwise_or | noteq_bitwise_or | lte_bitwise_or | lt_bitwise_or | gte_bitwise_or | gt_bitwise_or | notin_bitwise_or | in_bitwise_or | isnot_bitwise_or | is_bitwise_or
        mark = self.mark()
        cut = False
        if (
            (eq_bitwise_or := self.eq_bitwise_or())
        ):
            return [eq_bitwise_or]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (noteq_bitwise_or := self.noteq_bitwise_or())
        ):
            return [noteq_bitwise_or]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (lte_bitwise_or := self.lte_bitwise_or())
        ):
            return [lte_bitwise_or]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (lt_bitwise_or := self.lt_bitwise_or())
        ):
            return [lt_bitwise_or]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (gte_bitwise_or := self.gte_bitwise_or())
        ):
            return [gte_bitwise_or]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (gt_bitwise_or := self.gt_bitwise_or())
        ):
            return [gt_bitwise_or]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (notin_bitwise_or := self.notin_bitwise_or())
        ):
            return [notin_bitwise_or]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (in_bitwise_or := self.in_bitwise_or())
        ):
            return [in_bitwise_or]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (isnot_bitwise_or := self.isnot_bitwise_or())
        ):
            return [isnot_bitwise_or]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (is_bitwise_or := self.is_bitwise_or())
        ):
            return [is_bitwise_or]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def eq_bitwise_or(self) -> Optional[NodeType]:
        # eq_bitwise_or: '==' bitwise_or
        mark = self.mark()
        cut = False
        if (
            (literal := self.expect('=='))
            and
            (a := self.bitwise_or())
        ):
            return [literal, a]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def noteq_bitwise_or(self) -> Optional[NodeType]:
        # noteq_bitwise_or: ('!=') bitwise_or
        mark = self.mark()
        cut = False
        if (
            (tok := self.expect('!='))
            and
            (a := self.bitwise_or())
        ):
            return [tok, a]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def lte_bitwise_or(self) -> Optional[NodeType]:
        # lte_bitwise_or: '<=' bitwise_or
        mark = self.mark()
        cut = False
        if (
            (literal := self.expect('<='))
            and
            (a := self.bitwise_or())
        ):
            return [literal, a]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def lt_bitwise_or(self) -> Optional[NodeType]:
        # lt_bitwise_or: '<' bitwise_or
        mark = self.mark()
        cut = False
        if (
            (literal := self.expect('<'))
            and
            (a := self.bitwise_or())
        ):
            return [literal, a]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def gte_bitwise_or(self) -> Optional[NodeType]:
        # gte_bitwise_or: '>=' bitwise_or
        mark = self.mark()
        cut = False
        if (
            (literal := self.expect('>='))
            and
            (a := self.bitwise_or())
        ):
            return [literal, a]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def gt_bitwise_or(self) -> Optional[NodeType]:
        # gt_bitwise_or: '>' bitwise_or
        mark = self.mark()
        cut = False
        if (
            (literal := self.expect('>'))
            and
            (a := self.bitwise_or())
        ):
            return [literal, a]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def notin_bitwise_or(self) -> Optional[NodeType]:
        # notin_bitwise_or: 'not' 'in' bitwise_or
        mark = self.mark()
        cut = False
        if (
            (keyword := self.expect_keyword('not'))
            and
            (keyword_1 := self.expect_keyword('in'))
            and
            (a := self.bitwise_or())
        ):
            return [keyword, keyword_1, a]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def in_bitwise_or(self) -> Optional[NodeType]:
        # in_bitwise_or: 'in' bitwise_or
        mark = self.mark()
        cut = False
        if (
            (keyword := self.expect_keyword('in'))
            and
            (a := self.bitwise_or())
        ):
            return [keyword, a]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def isnot_bitwise_or(self) -> Optional[NodeType]:
        # isnot_bitwise_or: 'is' 'not' bitwise_or
        mark = self.mark()
        cut = False
        if (
            (keyword := self.expect_keyword('is'))
            and
            (keyword_1 := self.expect_keyword('not'))
            and
            (a := self.bitwise_or())
        ):
            return [keyword, keyword_1, a]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def is_bitwise_or(self) -> Optional[NodeType]:
        # is_bitwise_or: 'is' bitwise_or
        mark = self.mark()
        cut = False
        if (
            (keyword := self.expect_keyword('is'))
            and
            (a := self.bitwise_or())
        ):
            return [keyword, a]
        self.reset(mark)
        if cut: return None
        return None

    @memoize_left_rec
    def bitwise_or(self) -> Optional[NodeType]:
        # bitwise_or: bitwise_or '|' bitwise_xor | bitwise_xor
        mark = self.mark()
        cut = False
        if (
            (a := self.bitwise_or())
            and
            (literal := self.expect('|'))
            and
            (b := self.bitwise_xor())
        ):
            return [a, literal, b]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (bitwise_xor := self.bitwise_xor())
        ):
            return [bitwise_xor]
        self.reset(mark)
        if cut: return None
        return None

    @memoize_left_rec
    def bitwise_xor(self) -> Optional[NodeType]:
        # bitwise_xor: bitwise_xor '^' bitwise_and | bitwise_and
        mark = self.mark()
        cut = False
        if (
            (a := self.bitwise_xor())
            and
            (literal := self.expect('^'))
            and
            (b := self.bitwise_and())
        ):
            return [a, literal, b]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (bitwise_and := self.bitwise_and())
        ):
            return [bitwise_and]
        self.reset(mark)
        if cut: return None
        return None

    @memoize_left_rec
    def bitwise_and(self) -> Optional[NodeType]:
        # bitwise_and: bitwise_and '&' shift_expr | shift_expr
        mark = self.mark()
        cut = False
        if (
            (a := self.bitwise_and())
            and
            (literal := self.expect('&'))
            and
            (b := self.shift_expr())
        ):
            return [a, literal, b]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (shift_expr := self.shift_expr())
        ):
            return [shift_expr]
        self.reset(mark)
        if cut: return None
        return None

    @memoize_left_rec
    def shift_expr(self) -> Optional[NodeType]:
        # shift_expr: shift_expr '<<' sum | shift_expr '>>' sum | sum
        mark = self.mark()
        cut = False
        if (
            (a := self.shift_expr())
            and
            (literal := self.expect('<<'))
            and
            (b := self.sum())
        ):
            return [a, literal, b]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (a := self.shift_expr())
            and
            (literal := self.expect('>>'))
            and
            (b := self.sum())
        ):
            return [a, literal, b]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (sum := self.sum())
        ):
            return [sum]
        self.reset(mark)
        if cut: return None
        return None

    @memoize_left_rec
    def sum(self) -> Optional[NodeType]:
        # sum: sum '+' term | sum '-' term | term
        mark = self.mark()
        cut = False
        if (
            (a := self.sum())
            and
            (literal := self.expect('+'))
            and
            (b := self.term())
        ):
            return [a, literal, b]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (a := self.sum())
            and
            (literal := self.expect('-'))
            and
            (b := self.term())
        ):
            return [a, literal, b]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (term := self.term())
        ):
            return [term]
        self.reset(mark)
        if cut: return None
        return None

    @memoize_left_rec
    def term(self) -> Optional[NodeType]:
        # term: term '*' factor | term '/' factor | term '//' factor | term '%' factor | term '@' factor | factor
        mark = self.mark()
        cut = False
        if (
            (a := self.term())
            and
            (literal := self.expect('*'))
            and
            (b := self.factor())
        ):
            return [a, literal, b]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (a := self.term())
            and
            (literal := self.expect('/'))
            and
            (b := self.factor())
        ):
            return [a, literal, b]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (a := self.term())
            and
            (literal := self.expect('//'))
            and
            (b := self.factor())
        ):
            return [a, literal, b]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (a := self.term())
            and
            (literal := self.expect('%'))
            and
            (b := self.factor())
        ):
            return [a, literal, b]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (a := self.term())
            and
            (literal := self.expect('@'))
            and
            (b := self.factor())
        ):
            return [a, literal, b]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (factor := self.factor())
        ):
            return [factor]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def factor(self) -> Optional[NodeType]:
        # factor: '+' factor | '-' factor | '~' factor | power
        mark = self.mark()
        cut = False
        if (
            (literal := self.expect('+'))
            and
            (a := self.factor())
        ):
            return [literal, a]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (literal := self.expect('-'))
            and
            (a := self.factor())
        ):
            return [literal, a]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (literal := self.expect('~'))
            and
            (a := self.factor())
        ):
            return [literal, a]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (power := self.power())
        ):
            return [power]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def power(self) -> Optional[NodeType]:
        # power: await_primary '**' factor | await_primary
        mark = self.mark()
        cut = False
        if (
            (a := self.await_primary())
            and
            (literal := self.expect('**'))
            and
            (b := self.factor())
        ):
            return [a, literal, b]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (await_primary := self.await_primary())
        ):
            return [await_primary]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def await_primary(self) -> Optional[NodeType]:
        # await_primary: AWAIT primary | primary
        mark = self.mark()
        cut = False
        if (
            (await_ := self.expect('AWAIT'))
            and
            (a := self.primary())
        ):
            return [await_, a]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (primary := self.primary())
        ):
            return [primary]
        self.reset(mark)
        if cut: return None
        return None

    @memoize_left_rec
    def primary(self) -> Optional[NodeType]:
        # primary: primary '.' NAME | primary genexp | primary '(' arguments? ')' | primary '[' slices ']' | atom
        mark = self.mark()
        cut = False
        if (
            (a := self.primary())
            and
            (literal := self.expect('.'))
            and
            (b := self.name())
        ):
            return [a, literal, b]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (a := self.primary())
            and
            (b := self.genexp())
        ):
            return [a, b]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (a := self.primary())
            and
            (literal := self.expect('('))
            and
            (b := self.arguments(),)
            and
            (literal_1 := self.expect(')'))
        ):
            return [a, literal, b, literal_1]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (a := self.primary())
            and
            (literal := self.expect('['))
            and
            (b := self.slices())
            and
            (literal_1 := self.expect(']'))
        ):
            return [a, literal, b, literal_1]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (atom := self.atom())
        ):
            return [atom]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def slices(self) -> Optional[NodeType]:
        # slices: slice !',' | ','.slice+ ','?
        mark = self.mark()
        cut = False
        if (
            (a := self.slice())
            and
            self.negative_lookahead(self.expect, ',')
        ):
            return [a]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (a := self._gather_93())
            and
            (opt := self.expect(','),)
        ):
            return [a, opt]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def slice(self) -> Optional[NodeType]:
        # slice: expression? ':' expression? [':' expression?] | expression
        mark = self.mark()
        cut = False
        if (
            (a := self.expression(),)
            and
            (literal := self.expect(':'))
            and
            (b := self.expression(),)
            and
            (c := self._tmp_95(),)
        ):
            return [a, literal, b, c]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (a := self.expression())
        ):
            return [a]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def atom(self) -> Optional[NodeType]:
        # atom: NAME | 'True' | 'False' | 'None' | &STRING strings | NUMBER | &'(' (tuple | group | genexp) | &'[' (list | listcomp) | &'{' (dict | set | dictcomp | setcomp) | '...'
        mark = self.mark()
        cut = False
        if (
            (name_ := self.name())
        ):
            return [name_]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (keyword := self.expect_keyword('True'))
        ):
            return [keyword]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (keyword := self.expect_keyword('False'))
        ):
            return [keyword]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (keyword := self.expect_keyword('None'))
        ):
            return [keyword]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            self.positive_lookahead(self.string, )
            and
            (strings := self.strings())
        ):
            return [strings]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (number_ := self.number())
        ):
            return [number_]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            self.positive_lookahead(self.expect, '(')
            and
            (_tmp_96 := self._tmp_96())
        ):
            return [_tmp_96]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            self.positive_lookahead(self.expect, '[')
            and
            (_tmp_97 := self._tmp_97())
        ):
            return [_tmp_97]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            self.positive_lookahead(self.expect, '{')
            and
            (_tmp_98 := self._tmp_98())
        ):
            return [_tmp_98]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (literal := self.expect('...'))
        ):
            return [literal]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def strings(self) -> Optional[NodeType]:
        # strings: STRING+
        mark = self.mark()
        cut = False
        if (
            (a := self._loop1_99())
        ):
            return [a]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def list(self) -> Optional[NodeType]:
        # list: '[' star_named_expressions? ']'
        mark = self.mark()
        cut = False
        if (
            (literal := self.expect('['))
            and
            (a := self.star_named_expressions(),)
            and
            (literal_1 := self.expect(']'))
        ):
            return [literal, a, literal_1]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def listcomp(self) -> Optional[NodeType]:
        # listcomp: '[' named_expression ~ for_if_clauses ']' | invalid_comprehension
        mark = self.mark()
        cut = False
        if (
            (literal := self.expect('['))
            and
            (a := self.named_expression())
            and
            (cut := True)
            and
            (b := self.for_if_clauses())
            and
            (literal_1 := self.expect(']'))
        ):
            return [literal, a, b, literal_1]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (invalid_comprehension := self.invalid_comprehension())
        ):
            return [invalid_comprehension]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def tuple(self) -> Optional[NodeType]:
        # tuple: '(' [star_named_expression ',' star_named_expressions?] ')'
        mark = self.mark()
        cut = False
        if (
            (literal := self.expect('('))
            and
            (a := self._tmp_100(),)
            and
            (literal_1 := self.expect(')'))
        ):
            return [literal, a, literal_1]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def group(self) -> Optional[NodeType]:
        # group: '(' (yield_expr | named_expression) ')' | invalid_group
        mark = self.mark()
        cut = False
        if (
            (literal := self.expect('('))
            and
            (a := self._tmp_101())
            and
            (literal_1 := self.expect(')'))
        ):
            return [literal, a, literal_1]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (invalid_group := self.invalid_group())
        ):
            return [invalid_group]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def genexp(self) -> Optional[NodeType]:
        # genexp: '(' expression ~ for_if_clauses ')' | invalid_comprehension
        mark = self.mark()
        cut = False
        if (
            (literal := self.expect('('))
            and
            (a := self.expression())
            and
            (cut := True)
            and
            (b := self.for_if_clauses())
            and
            (literal_1 := self.expect(')'))
        ):
            return [literal, a, b, literal_1]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (invalid_comprehension := self.invalid_comprehension())
        ):
            return [invalid_comprehension]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def set(self) -> Optional[NodeType]:
        # set: '{' expressions_list '}'
        mark = self.mark()
        cut = False
        if (
            (literal := self.expect('{'))
            and
            (a := self.expressions_list())
            and
            (literal_1 := self.expect('}'))
        ):
            return [literal, a, literal_1]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def setcomp(self) -> Optional[NodeType]:
        # setcomp: '{' expression ~ for_if_clauses '}' | invalid_comprehension
        mark = self.mark()
        cut = False
        if (
            (literal := self.expect('{'))
            and
            (a := self.expression())
            and
            (cut := True)
            and
            (b := self.for_if_clauses())
            and
            (literal_1 := self.expect('}'))
        ):
            return [literal, a, b, literal_1]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (invalid_comprehension := self.invalid_comprehension())
        ):
            return [invalid_comprehension]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def dict(self) -> Optional[NodeType]:
        # dict: '{' double_starred_kvpairs? '}'
        mark = self.mark()
        cut = False
        if (
            (literal := self.expect('{'))
            and
            (a := self.double_starred_kvpairs(),)
            and
            (literal_1 := self.expect('}'))
        ):
            return [literal, a, literal_1]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def dictcomp(self) -> Optional[NodeType]:
        # dictcomp: '{' kvpair for_if_clauses '}' | invalid_dict_comprehension
        mark = self.mark()
        cut = False
        if (
            (literal := self.expect('{'))
            and
            (a := self.kvpair())
            and
            (b := self.for_if_clauses())
            and
            (literal_1 := self.expect('}'))
        ):
            return [literal, a, b, literal_1]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (invalid_dict_comprehension := self.invalid_dict_comprehension())
        ):
            return [invalid_dict_comprehension]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def double_starred_kvpairs(self) -> Optional[NodeType]:
        # double_starred_kvpairs: ','.double_starred_kvpair+ ','?
        mark = self.mark()
        cut = False
        if (
            (a := self._gather_102())
            and
            (opt := self.expect(','),)
        ):
            return [a, opt]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def double_starred_kvpair(self) -> Optional[NodeType]:
        # double_starred_kvpair: '**' bitwise_or | kvpair
        mark = self.mark()
        cut = False
        if (
            (literal := self.expect('**'))
            and
            (a := self.bitwise_or())
        ):
            return [literal, a]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (kvpair := self.kvpair())
        ):
            return [kvpair]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def kvpair(self) -> Optional[NodeType]:
        # kvpair: expression ':' expression
        mark = self.mark()
        cut = False
        if (
            (a := self.expression())
            and
            (literal := self.expect(':'))
            and
            (b := self.expression())
        ):
            return [a, literal, b]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def for_if_clauses(self) -> Optional[NodeType]:
        # for_if_clauses: for_if_clause+
        mark = self.mark()
        cut = False
        if (
            (_loop1_104 := self._loop1_104())
        ):
            return [_loop1_104]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def for_if_clause(self) -> Optional[NodeType]:
        # for_if_clause: ASYNC 'for' star_targets 'in' ~ disjunction (('if' disjunction))* | 'for' star_targets 'in' ~ disjunction (('if' disjunction))* | invalid_for_target
        mark = self.mark()
        cut = False
        if (
            (async_ := self.expect('ASYNC'))
            and
            (keyword := self.expect_keyword('for'))
            and
            (a := self.star_targets())
            and
            (keyword_1 := self.expect_keyword('in'))
            and
            (cut := True)
            and
            (b := self.disjunction())
            and
            (c := self._loop0_105(),)
        ):
            return [async_, keyword, a, keyword_1, b, c]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (keyword := self.expect_keyword('for'))
            and
            (a := self.star_targets())
            and
            (keyword_1 := self.expect_keyword('in'))
            and
            (cut := True)
            and
            (b := self.disjunction())
            and
            (c := self._loop0_106(),)
        ):
            return [keyword, a, keyword_1, b, c]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (invalid_for_target := self.invalid_for_target())
        ):
            return [invalid_for_target]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def yield_expr(self) -> Optional[NodeType]:
        # yield_expr: 'yield' 'from' expression | 'yield' star_expressions?
        mark = self.mark()
        cut = False
        if (
            (keyword := self.expect_keyword('yield'))
            and
            (keyword_1 := self.expect_keyword('from'))
            and
            (a := self.expression())
        ):
            return [keyword, keyword_1, a]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (keyword := self.expect_keyword('yield'))
            and
            (a := self.star_expressions(),)
        ):
            return [keyword, a]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def arguments(self) -> Optional[NodeType]:
        # arguments: args ','? &')' | incorrect_arguments
        mark = self.mark()
        cut = False
        if (
            (a := self.args())
            and
            (opt := self.expect(','),)
            and
            self.positive_lookahead(self.expect, ')')
        ):
            return [a, opt]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (incorrect_arguments := self.incorrect_arguments())
        ):
            return [incorrect_arguments]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def args(self) -> Optional[NodeType]:
        # args: ','.(starred_expression | named_expression !'=')+ [',' kwargs] | kwargs
        mark = self.mark()
        cut = False
        if (
            (_gather_107 := self._gather_107())
            and
            (opt := self._tmp_109(),)
        ):
            return [_gather_107, opt]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (a := self.kwargs())
        ):
            return [a]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def kwargs(self) -> Optional[NodeType]:
        # kwargs: ','.kwarg_or_starred+ ',' ','.kwarg_or_double_starred+ | ','.kwarg_or_starred+ | ','.kwarg_or_double_starred+
        mark = self.mark()
        cut = False
        if (
            (a := self._gather_110())
            and
            (literal := self.expect(','))
            and
            (b := self._gather_112())
        ):
            return [a, literal, b]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (_gather_114 := self._gather_114())
        ):
            return [_gather_114]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (_gather_116 := self._gather_116())
        ):
            return [_gather_116]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def starred_expression(self) -> Optional[NodeType]:
        # starred_expression: '*' expression
        mark = self.mark()
        cut = False
        if (
            (literal := self.expect('*'))
            and
            (a := self.expression())
        ):
            return [literal, a]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def kwarg_or_starred(self) -> Optional[NodeType]:
        # kwarg_or_starred: NAME '=' expression | starred_expression | invalid_kwarg
        mark = self.mark()
        cut = False
        if (
            (a := self.name())
            and
            (literal := self.expect('='))
            and
            (b := self.expression())
        ):
            return [a, literal, b]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (a := self.starred_expression())
        ):
            return [a]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (invalid_kwarg := self.invalid_kwarg())
        ):
            return [invalid_kwarg]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def kwarg_or_double_starred(self) -> Optional[NodeType]:
        # kwarg_or_double_starred: NAME '=' expression | '**' expression | invalid_kwarg
        mark = self.mark()
        cut = False
        if (
            (a := self.name())
            and
            (literal := self.expect('='))
            and
            (b := self.expression())
        ):
            return [a, literal, b]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (literal := self.expect('**'))
            and
            (a := self.expression())
        ):
            return [literal, a]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (invalid_kwarg := self.invalid_kwarg())
        ):
            return [invalid_kwarg]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def star_targets(self) -> Optional[NodeType]:
        # star_targets: star_target !',' | star_target ((',' star_target))* ','?
        mark = self.mark()
        cut = False
        if (
            (a := self.star_target())
            and
            self.negative_lookahead(self.expect, ',')
        ):
            return [a]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (a := self.star_target())
            and
            (b := self._loop0_118(),)
            and
            (opt := self.expect(','),)
        ):
            return [a, b, opt]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def star_targets_seq(self) -> Optional[NodeType]:
        # star_targets_seq: ','.star_target+ ','?
        mark = self.mark()
        cut = False
        if (
            (a := self._gather_119())
            and
            (opt := self.expect(','),)
        ):
            return [a, opt]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def star_target(self) -> Optional[NodeType]:
        # star_target: '*' (!'*' star_target) | t_primary '.' NAME !t_lookahead | t_primary '[' slices ']' !t_lookahead | star_atom
        mark = self.mark()
        cut = False
        if (
            (literal := self.expect('*'))
            and
            (a := self._tmp_121())
        ):
            return [literal, a]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (a := self.t_primary())
            and
            (literal := self.expect('.'))
            and
            (b := self.name())
            and
            self.negative_lookahead(self.t_lookahead, )
        ):
            return [a, literal, b]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (a := self.t_primary())
            and
            (literal := self.expect('['))
            and
            (b := self.slices())
            and
            (literal_1 := self.expect(']'))
            and
            self.negative_lookahead(self.t_lookahead, )
        ):
            return [a, literal, b, literal_1]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (star_atom := self.star_atom())
        ):
            return [star_atom]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def star_atom(self) -> Optional[NodeType]:
        # star_atom: NAME | '(' star_target ')' | '(' star_targets_seq? ')' | '[' star_targets_seq? ']'
        mark = self.mark()
        cut = False
        if (
            (a := self.name())
        ):
            return [a]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (literal := self.expect('('))
            and
            (a := self.star_target())
            and
            (literal_1 := self.expect(')'))
        ):
            return [literal, a, literal_1]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (literal := self.expect('('))
            and
            (a := self.star_targets_seq(),)
            and
            (literal_1 := self.expect(')'))
        ):
            return [literal, a, literal_1]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (literal := self.expect('['))
            and
            (a := self.star_targets_seq(),)
            and
            (literal_1 := self.expect(']'))
        ):
            return [literal, a, literal_1]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def single_target(self) -> Optional[NodeType]:
        # single_target: single_subscript_attribute_target | NAME | '(' single_target ')'
        mark = self.mark()
        cut = False
        if (
            (single_subscript_attribute_target := self.single_subscript_attribute_target())
        ):
            return [single_subscript_attribute_target]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (a := self.name())
        ):
            return [a]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (literal := self.expect('('))
            and
            (a := self.single_target())
            and
            (literal_1 := self.expect(')'))
        ):
            return [literal, a, literal_1]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def single_subscript_attribute_target(self) -> Optional[NodeType]:
        # single_subscript_attribute_target: t_primary '.' NAME !t_lookahead | t_primary '[' slices ']' !t_lookahead
        mark = self.mark()
        cut = False
        if (
            (a := self.t_primary())
            and
            (literal := self.expect('.'))
            and
            (b := self.name())
            and
            self.negative_lookahead(self.t_lookahead, )
        ):
            return [a, literal, b]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (a := self.t_primary())
            and
            (literal := self.expect('['))
            and
            (b := self.slices())
            and
            (literal_1 := self.expect(']'))
            and
            self.negative_lookahead(self.t_lookahead, )
        ):
            return [a, literal, b, literal_1]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def del_targets(self) -> Optional[NodeType]:
        # del_targets: ','.del_target+ ','?
        mark = self.mark()
        cut = False
        if (
            (a := self._gather_122())
            and
            (opt := self.expect(','),)
        ):
            return [a, opt]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def del_target(self) -> Optional[NodeType]:
        # del_target: t_primary '.' NAME !t_lookahead | t_primary '[' slices ']' !t_lookahead | del_t_atom
        mark = self.mark()
        cut = False
        if (
            (a := self.t_primary())
            and
            (literal := self.expect('.'))
            and
            (b := self.name())
            and
            self.negative_lookahead(self.t_lookahead, )
        ):
            return [a, literal, b]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (a := self.t_primary())
            and
            (literal := self.expect('['))
            and
            (b := self.slices())
            and
            (literal_1 := self.expect(']'))
            and
            self.negative_lookahead(self.t_lookahead, )
        ):
            return [a, literal, b, literal_1]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (del_t_atom := self.del_t_atom())
        ):
            return [del_t_atom]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def del_t_atom(self) -> Optional[NodeType]:
        # del_t_atom: NAME | '(' del_target ')' | '(' del_targets? ')' | '[' del_targets? ']'
        mark = self.mark()
        cut = False
        if (
            (a := self.name())
        ):
            return [a]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (literal := self.expect('('))
            and
            (a := self.del_target())
            and
            (literal_1 := self.expect(')'))
        ):
            return [literal, a, literal_1]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (literal := self.expect('('))
            and
            (a := self.del_targets(),)
            and
            (literal_1 := self.expect(')'))
        ):
            return [literal, a, literal_1]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (literal := self.expect('['))
            and
            (a := self.del_targets(),)
            and
            (literal_1 := self.expect(']'))
        ):
            return [literal, a, literal_1]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def targets(self) -> Optional[NodeType]:
        # targets: ','.target+ ','?
        mark = self.mark()
        cut = False
        if (
            (a := self._gather_124())
            and
            (opt := self.expect(','),)
        ):
            return [a, opt]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def target(self) -> Optional[NodeType]:
        # target: t_primary '.' NAME !t_lookahead | t_primary '[' slices ']' !t_lookahead | t_atom
        mark = self.mark()
        cut = False
        if (
            (a := self.t_primary())
            and
            (literal := self.expect('.'))
            and
            (b := self.name())
            and
            self.negative_lookahead(self.t_lookahead, )
        ):
            return [a, literal, b]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (a := self.t_primary())
            and
            (literal := self.expect('['))
            and
            (b := self.slices())
            and
            (literal_1 := self.expect(']'))
            and
            self.negative_lookahead(self.t_lookahead, )
        ):
            return [a, literal, b, literal_1]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (t_atom := self.t_atom())
        ):
            return [t_atom]
        self.reset(mark)
        if cut: return None
        return None

    @memoize_left_rec
    def t_primary(self) -> Optional[NodeType]:
        # t_primary: t_primary '.' NAME &t_lookahead | t_primary '[' slices ']' &t_lookahead | t_primary genexp &t_lookahead | t_primary '(' arguments? ')' &t_lookahead | atom &t_lookahead
        mark = self.mark()
        cut = False
        if (
            (a := self.t_primary())
            and
            (literal := self.expect('.'))
            and
            (b := self.name())
            and
            self.positive_lookahead(self.t_lookahead, )
        ):
            return [a, literal, b]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (a := self.t_primary())
            and
            (literal := self.expect('['))
            and
            (b := self.slices())
            and
            (literal_1 := self.expect(']'))
            and
            self.positive_lookahead(self.t_lookahead, )
        ):
            return [a, literal, b, literal_1]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (a := self.t_primary())
            and
            (b := self.genexp())
            and
            self.positive_lookahead(self.t_lookahead, )
        ):
            return [a, b]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (a := self.t_primary())
            and
            (literal := self.expect('('))
            and
            (b := self.arguments(),)
            and
            (literal_1 := self.expect(')'))
            and
            self.positive_lookahead(self.t_lookahead, )
        ):
            return [a, literal, b, literal_1]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (a := self.atom())
            and
            self.positive_lookahead(self.t_lookahead, )
        ):
            return [a]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def t_lookahead(self) -> Optional[NodeType]:
        # t_lookahead: '(' | '[' | '.'
        mark = self.mark()
        cut = False
        if (
            (literal := self.expect('('))
        ):
            return [literal]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (literal := self.expect('['))
        ):
            return [literal]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (literal := self.expect('.'))
        ):
            return [literal]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def t_atom(self) -> Optional[NodeType]:
        # t_atom: NAME | '(' target ')' | '(' targets? ')' | '[' targets? ']'
        mark = self.mark()
        cut = False
        if (
            (a := self.name())
        ):
            return [a]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (literal := self.expect('('))
            and
            (a := self.target())
            and
            (literal_1 := self.expect(')'))
        ):
            return [literal, a, literal_1]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (literal := self.expect('('))
            and
            (b := self.targets(),)
            and
            (literal_1 := self.expect(')'))
        ):
            return [literal, b, literal_1]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (literal := self.expect('['))
            and
            (b := self.targets(),)
            and
            (literal_1 := self.expect(']'))
        ):
            return [literal, b, literal_1]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def incorrect_arguments(self) -> Optional[NodeType]:
        # incorrect_arguments: args ',' '*' | expression for_if_clauses ',' [args | expression for_if_clauses] | args for_if_clauses | args ',' expression for_if_clauses | args ',' args
        mark = self.mark()
        cut = False
        if (
            (args := self.args())
            and
            (literal := self.expect(','))
            and
            (literal_1 := self.expect('*'))
        ):
            return None
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (a := self.expression())
            and
            (for_if_clauses := self.for_if_clauses())
            and
            (literal := self.expect(','))
            and
            (opt := self._tmp_126(),)
        ):
            return None
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (a := self.args())
            and
            (for_if_clauses := self.for_if_clauses())
        ):
            return None
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (args := self.args())
            and
            (literal := self.expect(','))
            and
            (a := self.expression())
            and
            (for_if_clauses := self.for_if_clauses())
        ):
            return None
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (a := self.args())
            and
            (literal := self.expect(','))
            and
            (args := self.args())
        ):
            return None
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def invalid_kwarg(self) -> Optional[NodeType]:
        # invalid_kwarg: expression '='
        mark = self.mark()
        cut = False
        if (
            (a := self.expression())
            and
            (literal := self.expect('='))
        ):
            return None
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def invalid_named_expression(self) -> Optional[NodeType]:
        # invalid_named_expression: expression ':=' expression
        mark = self.mark()
        cut = False
        if (
            (a := self.expression())
            and
            (literal := self.expect(':='))
            and
            (expression := self.expression())
        ):
            return None
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def invalid_assignment(self) -> Optional[NodeType]:
        # invalid_assignment: invalid_ann_assign_target ':' expression | star_named_expression ',' star_named_expressions* ':' expression | expression ':' expression | ((star_targets '='))* star_expressions '=' | ((star_targets '='))* yield_expr '=' | star_expressions augassign (yield_expr | star_expressions)
        mark = self.mark()
        cut = False
        if (
            (a := self.invalid_ann_assign_target())
            and
            (literal := self.expect(':'))
            and
            (expression := self.expression())
        ):
            return None
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (a := self.star_named_expression())
            and
            (literal := self.expect(','))
            and
            (_loop0_127 := self._loop0_127(),)
            and
            (literal_1 := self.expect(':'))
            and
            (expression := self.expression())
        ):
            return None
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (a := self.expression())
            and
            (literal := self.expect(':'))
            and
            (expression := self.expression())
        ):
            return None
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (_loop0_128 := self._loop0_128(),)
            and
            (a := self.star_expressions())
            and
            (literal := self.expect('='))
        ):
            return None
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (_loop0_129 := self._loop0_129(),)
            and
            (a := self.yield_expr())
            and
            (literal := self.expect('='))
        ):
            return None
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (a := self.star_expressions())
            and
            (augassign := self.augassign())
            and
            (_tmp_130 := self._tmp_130())
        ):
            return None
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def invalid_ann_assign_target(self) -> Optional[NodeType]:
        # invalid_ann_assign_target: list | tuple | '(' invalid_ann_assign_target ')'
        mark = self.mark()
        cut = False
        if (
            (list := self.list())
        ):
            return None
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (tuple := self.tuple())
        ):
            return None
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (literal := self.expect('('))
            and
            (a := self.invalid_ann_assign_target())
            and
            (literal_1 := self.expect(')'))
        ):
            return None
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def invalid_del_stmt(self) -> Optional[NodeType]:
        # invalid_del_stmt: 'del' star_expressions
        mark = self.mark()
        cut = False
        if (
            (keyword := self.expect_keyword('del'))
            and
            (a := self.star_expressions())
        ):
            return None
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def invalid_block(self) -> Optional[NodeType]:
        # invalid_block: NEWLINE !INDENT
        mark = self.mark()
        cut = False
        if (
            (newline_ := self.expect('NEWLINE'))
            and
            self.negative_lookahead(self.expect, 'INDENT')
        ):
            return None
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def invalid_comprehension(self) -> Optional[NodeType]:
        # invalid_comprehension: ('[' | '(' | '{') starred_expression for_if_clauses
        mark = self.mark()
        cut = False
        if (
            (_tmp_131 := self._tmp_131())
            and
            (a := self.starred_expression())
            and
            (for_if_clauses := self.for_if_clauses())
        ):
            return None
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def invalid_dict_comprehension(self) -> Optional[NodeType]:
        # invalid_dict_comprehension: '{' '**' bitwise_or for_if_clauses '}'
        mark = self.mark()
        cut = False
        if (
            (literal := self.expect('{'))
            and
            (a := self.expect('**'))
            and
            (bitwise_or := self.bitwise_or())
            and
            (for_if_clauses := self.for_if_clauses())
            and
            (literal_1 := self.expect('}'))
        ):
            return None
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def invalid_parameters(self) -> Optional[NodeType]:
        # invalid_parameters: param_no_default* (slash_with_default | param_with_default+) param_no_default
        mark = self.mark()
        cut = False
        if (
            (_loop0_132 := self._loop0_132(),)
            and
            (_tmp_133 := self._tmp_133())
            and
            (param_no_default := self.param_no_default())
        ):
            return None
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def invalid_lambda_parameters(self) -> Optional[NodeType]:
        # invalid_lambda_parameters: lambda_param_no_default* (lambda_slash_with_default | lambda_param_with_default+) lambda_param_no_default
        mark = self.mark()
        cut = False
        if (
            (_loop0_134 := self._loop0_134(),)
            and
            (_tmp_135 := self._tmp_135())
            and
            (lambda_param_no_default := self.lambda_param_no_default())
        ):
            return None
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def invalid_star_etc(self) -> Optional[NodeType]:
        # invalid_star_etc: '*' (')' | ',' (')' | '**')) | '*' ',' TYPE_COMMENT
        mark = self.mark()
        cut = False
        if (
            (literal := self.expect('*'))
            and
            (_tmp_136 := self._tmp_136())
        ):
            return None
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (literal := self.expect('*'))
            and
            (literal_1 := self.expect(','))
            and
            (type_comment_ := self.expect('TYPE_COMMENT'))
        ):
            return None
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def invalid_lambda_star_etc(self) -> Optional[NodeType]:
        # invalid_lambda_star_etc: '*' (':' | ',' (':' | '**'))
        mark = self.mark()
        cut = False
        if (
            (literal := self.expect('*'))
            and
            (_tmp_137 := self._tmp_137())
        ):
            return None
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def invalid_double_type_comments(self) -> Optional[NodeType]:
        # invalid_double_type_comments: TYPE_COMMENT NEWLINE TYPE_COMMENT NEWLINE INDENT
        mark = self.mark()
        cut = False
        if (
            (type_comment_ := self.expect('TYPE_COMMENT'))
            and
            (newline_ := self.expect('NEWLINE'))
            and
            (type_comment__1 := self.expect('TYPE_COMMENT'))
            and
            (newline__1 := self.expect('NEWLINE'))
            and
            (indent_ := self.expect('INDENT'))
        ):
            return None
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def invalid_with_item(self) -> Optional[NodeType]:
        # invalid_with_item: expression 'as' expression
        mark = self.mark()
        cut = False
        if (
            (expression := self.expression())
            and
            (keyword := self.expect_keyword('as'))
            and
            (a := self.expression())
        ):
            return None
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def invalid_for_target(self) -> Optional[NodeType]:
        # invalid_for_target: ASYNC? 'for' star_expressions
        mark = self.mark()
        cut = False
        if (
            (opt := self.expect('ASYNC'),)
            and
            (keyword := self.expect_keyword('for'))
            and
            (a := self.star_expressions())
        ):
            return None
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def invalid_group(self) -> Optional[NodeType]:
        # invalid_group: '(' starred_expression ')'
        mark = self.mark()
        cut = False
        if (
            (literal := self.expect('('))
            and
            (a := self.starred_expression())
            and
            (literal_1 := self.expect(')'))
        ):
            return None
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def invalid_import_from_targets(self) -> Optional[NodeType]:
        # invalid_import_from_targets: import_from_as_names ','
        mark = self.mark()
        cut = False
        if (
            (import_from_as_names := self.import_from_as_names())
            and
            (literal := self.expect(','))
        ):
            return None
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def _loop0_1(self) -> Optional[NodeType]:
        # _loop0_1: NEWLINE
        mark = self.mark()
        children = []
        cut = False
        while (
            (newline_ := self.expect('NEWLINE'))
        ):
            children.append([newline_])
            mark = self.mark()
        self.reset(mark)
        if cut: return None
        return children

    @memoize
    def _loop0_2(self) -> Optional[NodeType]:
        # _loop0_2: NEWLINE
        mark = self.mark()
        children = []
        cut = False
        while (
            (newline_ := self.expect('NEWLINE'))
        ):
            children.append([newline_])
            mark = self.mark()
        self.reset(mark)
        if cut: return None
        return children

    @memoize
    def _loop0_4(self) -> Optional[NodeType]:
        # _loop0_4: ',' expression
        mark = self.mark()
        children = []
        cut = False
        while (
            (literal := self.expect(','))
            and
            (elem := self.expression())
        ):
            children.append([literal, elem])
            mark = self.mark()
        self.reset(mark)
        if cut: return None
        return children

    @memoize
    def _gather_3(self) -> Optional[NodeType]:
        # _gather_3: expression _loop0_4
        mark = self.mark()
        cut = False
        if (
            (elem := self.expression()) is not None
            and
            (seq := self._loop0_4()) is not None
        ):
            return [elem] + seq
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def _loop0_6(self) -> Optional[NodeType]:
        # _loop0_6: ',' expression
        mark = self.mark()
        children = []
        cut = False
        while (
            (literal := self.expect(','))
            and
            (elem := self.expression())
        ):
            children.append([literal, elem])
            mark = self.mark()
        self.reset(mark)
        if cut: return None
        return children

    @memoize
    def _gather_5(self) -> Optional[NodeType]:
        # _gather_5: expression _loop0_6
        mark = self.mark()
        cut = False
        if (
            (elem := self.expression()) is not None
            and
            (seq := self._loop0_6()) is not None
        ):
            return [elem] + seq
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def _loop0_8(self) -> Optional[NodeType]:
        # _loop0_8: ',' expression
        mark = self.mark()
        children = []
        cut = False
        while (
            (literal := self.expect(','))
            and
            (elem := self.expression())
        ):
            children.append([literal, elem])
            mark = self.mark()
        self.reset(mark)
        if cut: return None
        return children

    @memoize
    def _gather_7(self) -> Optional[NodeType]:
        # _gather_7: expression _loop0_8
        mark = self.mark()
        cut = False
        if (
            (elem := self.expression()) is not None
            and
            (seq := self._loop0_8()) is not None
        ):
            return [elem] + seq
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def _loop0_10(self) -> Optional[NodeType]:
        # _loop0_10: ',' expression
        mark = self.mark()
        children = []
        cut = False
        while (
            (literal := self.expect(','))
            and
            (elem := self.expression())
        ):
            children.append([literal, elem])
            mark = self.mark()
        self.reset(mark)
        if cut: return None
        return children

    @memoize
    def _gather_9(self) -> Optional[NodeType]:
        # _gather_9: expression _loop0_10
        mark = self.mark()
        cut = False
        if (
            (elem := self.expression()) is not None
            and
            (seq := self._loop0_10()) is not None
        ):
            return [elem] + seq
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def _loop1_11(self) -> Optional[NodeType]:
        # _loop1_11: statement
        mark = self.mark()
        children = []
        cut = False
        while (
            (statement := self.statement())
        ):
            children.append([statement])
            mark = self.mark()
        self.reset(mark)
        if cut: return None
        return children

    @memoize
    def _loop0_13(self) -> Optional[NodeType]:
        # _loop0_13: ';' small_stmt
        mark = self.mark()
        children = []
        cut = False
        while (
            (literal := self.expect(';'))
            and
            (elem := self.small_stmt())
        ):
            children.append([literal, elem])
            mark = self.mark()
        self.reset(mark)
        if cut: return None
        return children

    @memoize
    def _gather_12(self) -> Optional[NodeType]:
        # _gather_12: small_stmt _loop0_13
        mark = self.mark()
        cut = False
        if (
            (elem := self.small_stmt()) is not None
            and
            (seq := self._loop0_13()) is not None
        ):
            return [elem] + seq
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def _tmp_14(self) -> Optional[NodeType]:
        # _tmp_14: 'import' | 'from'
        mark = self.mark()
        cut = False
        if (
            (keyword := self.expect_keyword('import'))
        ):
            return [keyword]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (keyword := self.expect_keyword('from'))
        ):
            return [keyword]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def _tmp_15(self) -> Optional[NodeType]:
        # _tmp_15: 'def' | '@' | ASYNC
        mark = self.mark()
        cut = False
        if (
            (keyword := self.expect_keyword('def'))
        ):
            return [keyword]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (literal := self.expect('@'))
        ):
            return [literal]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (async_ := self.expect('ASYNC'))
        ):
            return [async_]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def _tmp_16(self) -> Optional[NodeType]:
        # _tmp_16: 'class' | '@'
        mark = self.mark()
        cut = False
        if (
            (keyword := self.expect_keyword('class'))
        ):
            return [keyword]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (literal := self.expect('@'))
        ):
            return [literal]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def _tmp_17(self) -> Optional[NodeType]:
        # _tmp_17: 'with' | ASYNC
        mark = self.mark()
        cut = False
        if (
            (keyword := self.expect_keyword('with'))
        ):
            return [keyword]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (async_ := self.expect('ASYNC'))
        ):
            return [async_]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def _tmp_18(self) -> Optional[NodeType]:
        # _tmp_18: 'for' | ASYNC
        mark = self.mark()
        cut = False
        if (
            (keyword := self.expect_keyword('for'))
        ):
            return [keyword]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (async_ := self.expect('ASYNC'))
        ):
            return [async_]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def _tmp_19(self) -> Optional[NodeType]:
        # _tmp_19: '=' annotated_rhs
        mark = self.mark()
        cut = False
        if (
            (literal := self.expect('='))
            and
            (d := self.annotated_rhs())
        ):
            return [literal, d]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def _tmp_20(self) -> Optional[NodeType]:
        # _tmp_20: '(' single_target ')' | single_subscript_attribute_target
        mark = self.mark()
        cut = False
        if (
            (literal := self.expect('('))
            and
            (b := self.single_target())
            and
            (literal_1 := self.expect(')'))
        ):
            return [literal, b, literal_1]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (single_subscript_attribute_target := self.single_subscript_attribute_target())
        ):
            return [single_subscript_attribute_target]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def _tmp_21(self) -> Optional[NodeType]:
        # _tmp_21: '=' annotated_rhs
        mark = self.mark()
        cut = False
        if (
            (literal := self.expect('='))
            and
            (d := self.annotated_rhs())
        ):
            return [literal, d]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def _loop1_22(self) -> Optional[NodeType]:
        # _loop1_22: (star_targets '=')
        mark = self.mark()
        children = []
        cut = False
        while (
            (_tmp_138 := self._tmp_138())
        ):
            children.append([_tmp_138])
            mark = self.mark()
        self.reset(mark)
        if cut: return None
        return children

    @memoize
    def _tmp_23(self) -> Optional[NodeType]:
        # _tmp_23: yield_expr | star_expressions
        mark = self.mark()
        cut = False
        if (
            (yield_expr := self.yield_expr())
        ):
            return [yield_expr]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (star_expressions := self.star_expressions())
        ):
            return [star_expressions]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def _tmp_24(self) -> Optional[NodeType]:
        # _tmp_24: yield_expr | star_expressions
        mark = self.mark()
        cut = False
        if (
            (yield_expr := self.yield_expr())
        ):
            return [yield_expr]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (star_expressions := self.star_expressions())
        ):
            return [star_expressions]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def _loop0_26(self) -> Optional[NodeType]:
        # _loop0_26: ',' NAME
        mark = self.mark()
        children = []
        cut = False
        while (
            (literal := self.expect(','))
            and
            (elem := self.name())
        ):
            children.append([literal, elem])
            mark = self.mark()
        self.reset(mark)
        if cut: return None
        return children

    @memoize
    def _gather_25(self) -> Optional[NodeType]:
        # _gather_25: NAME _loop0_26
        mark = self.mark()
        cut = False
        if (
            (elem := self.name()) is not None
            and
            (seq := self._loop0_26()) is not None
        ):
            return [elem] + seq
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def _loop0_28(self) -> Optional[NodeType]:
        # _loop0_28: ',' NAME
        mark = self.mark()
        children = []
        cut = False
        while (
            (literal := self.expect(','))
            and
            (elem := self.name())
        ):
            children.append([literal, elem])
            mark = self.mark()
        self.reset(mark)
        if cut: return None
        return children

    @memoize
    def _gather_27(self) -> Optional[NodeType]:
        # _gather_27: NAME _loop0_28
        mark = self.mark()
        cut = False
        if (
            (elem := self.name()) is not None
            and
            (seq := self._loop0_28()) is not None
        ):
            return [elem] + seq
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def _tmp_29(self) -> Optional[NodeType]:
        # _tmp_29: ',' expression
        mark = self.mark()
        cut = False
        if (
            (literal := self.expect(','))
            and
            (z := self.expression())
        ):
            return [literal, z]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def _tmp_30(self) -> Optional[NodeType]:
        # _tmp_30: ';' | NEWLINE
        mark = self.mark()
        cut = False
        if (
            (literal := self.expect(';'))
        ):
            return [literal]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (newline_ := self.expect('NEWLINE'))
        ):
            return [newline_]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def _loop0_31(self) -> Optional[NodeType]:
        # _loop0_31: ('.' | '...')
        mark = self.mark()
        children = []
        cut = False
        while (
            (_tmp_139 := self._tmp_139())
        ):
            children.append([_tmp_139])
            mark = self.mark()
        self.reset(mark)
        if cut: return None
        return children

    @memoize
    def _loop1_32(self) -> Optional[NodeType]:
        # _loop1_32: ('.' | '...')
        mark = self.mark()
        children = []
        cut = False
        while (
            (_tmp_140 := self._tmp_140())
        ):
            children.append([_tmp_140])
            mark = self.mark()
        self.reset(mark)
        if cut: return None
        return children

    @memoize
    def _loop0_34(self) -> Optional[NodeType]:
        # _loop0_34: ',' import_from_as_name
        mark = self.mark()
        children = []
        cut = False
        while (
            (literal := self.expect(','))
            and
            (elem := self.import_from_as_name())
        ):
            children.append([literal, elem])
            mark = self.mark()
        self.reset(mark)
        if cut: return None
        return children

    @memoize
    def _gather_33(self) -> Optional[NodeType]:
        # _gather_33: import_from_as_name _loop0_34
        mark = self.mark()
        cut = False
        if (
            (elem := self.import_from_as_name()) is not None
            and
            (seq := self._loop0_34()) is not None
        ):
            return [elem] + seq
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def _tmp_35(self) -> Optional[NodeType]:
        # _tmp_35: 'as' NAME
        mark = self.mark()
        cut = False
        if (
            (keyword := self.expect_keyword('as'))
            and
            (z := self.name())
        ):
            return [keyword, z]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def _loop0_37(self) -> Optional[NodeType]:
        # _loop0_37: ',' dotted_as_name
        mark = self.mark()
        children = []
        cut = False
        while (
            (literal := self.expect(','))
            and
            (elem := self.dotted_as_name())
        ):
            children.append([literal, elem])
            mark = self.mark()
        self.reset(mark)
        if cut: return None
        return children

    @memoize
    def _gather_36(self) -> Optional[NodeType]:
        # _gather_36: dotted_as_name _loop0_37
        mark = self.mark()
        cut = False
        if (
            (elem := self.dotted_as_name()) is not None
            and
            (seq := self._loop0_37()) is not None
        ):
            return [elem] + seq
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def _tmp_38(self) -> Optional[NodeType]:
        # _tmp_38: 'as' NAME
        mark = self.mark()
        cut = False
        if (
            (keyword := self.expect_keyword('as'))
            and
            (z := self.name())
        ):
            return [keyword, z]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def _loop0_40(self) -> Optional[NodeType]:
        # _loop0_40: ',' with_item
        mark = self.mark()
        children = []
        cut = False
        while (
            (literal := self.expect(','))
            and
            (elem := self.with_item())
        ):
            children.append([literal, elem])
            mark = self.mark()
        self.reset(mark)
        if cut: return None
        return children

    @memoize
    def _gather_39(self) -> Optional[NodeType]:
        # _gather_39: with_item _loop0_40
        mark = self.mark()
        cut = False
        if (
            (elem := self.with_item()) is not None
            and
            (seq := self._loop0_40()) is not None
        ):
            return [elem] + seq
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def _loop0_42(self) -> Optional[NodeType]:
        # _loop0_42: ',' with_item
        mark = self.mark()
        children = []
        cut = False
        while (
            (literal := self.expect(','))
            and
            (elem := self.with_item())
        ):
            children.append([literal, elem])
            mark = self.mark()
        self.reset(mark)
        if cut: return None
        return children

    @memoize
    def _gather_41(self) -> Optional[NodeType]:
        # _gather_41: with_item _loop0_42
        mark = self.mark()
        cut = False
        if (
            (elem := self.with_item()) is not None
            and
            (seq := self._loop0_42()) is not None
        ):
            return [elem] + seq
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def _loop0_44(self) -> Optional[NodeType]:
        # _loop0_44: ',' with_item
        mark = self.mark()
        children = []
        cut = False
        while (
            (literal := self.expect(','))
            and
            (elem := self.with_item())
        ):
            children.append([literal, elem])
            mark = self.mark()
        self.reset(mark)
        if cut: return None
        return children

    @memoize
    def _gather_43(self) -> Optional[NodeType]:
        # _gather_43: with_item _loop0_44
        mark = self.mark()
        cut = False
        if (
            (elem := self.with_item()) is not None
            and
            (seq := self._loop0_44()) is not None
        ):
            return [elem] + seq
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def _loop0_46(self) -> Optional[NodeType]:
        # _loop0_46: ',' with_item
        mark = self.mark()
        children = []
        cut = False
        while (
            (literal := self.expect(','))
            and
            (elem := self.with_item())
        ):
            children.append([literal, elem])
            mark = self.mark()
        self.reset(mark)
        if cut: return None
        return children

    @memoize
    def _gather_45(self) -> Optional[NodeType]:
        # _gather_45: with_item _loop0_46
        mark = self.mark()
        cut = False
        if (
            (elem := self.with_item()) is not None
            and
            (seq := self._loop0_46()) is not None
        ):
            return [elem] + seq
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def _tmp_47(self) -> Optional[NodeType]:
        # _tmp_47: ',' | ')' | ':'
        mark = self.mark()
        cut = False
        if (
            (literal := self.expect(','))
        ):
            return [literal]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (literal := self.expect(')'))
        ):
            return [literal]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (literal := self.expect(':'))
        ):
            return [literal]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def _loop1_48(self) -> Optional[NodeType]:
        # _loop1_48: except_block
        mark = self.mark()
        children = []
        cut = False
        while (
            (except_block := self.except_block())
        ):
            children.append([except_block])
            mark = self.mark()
        self.reset(mark)
        if cut: return None
        return children

    @memoize
    def _tmp_49(self) -> Optional[NodeType]:
        # _tmp_49: 'as' NAME
        mark = self.mark()
        cut = False
        if (
            (keyword := self.expect_keyword('as'))
            and
            (z := self.name())
        ):
            return [keyword, z]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def _tmp_50(self) -> Optional[NodeType]:
        # _tmp_50: 'from' expression
        mark = self.mark()
        cut = False
        if (
            (keyword := self.expect_keyword('from'))
            and
            (z := self.expression())
        ):
            return [keyword, z]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def _tmp_51(self) -> Optional[NodeType]:
        # _tmp_51: '->' expression
        mark = self.mark()
        cut = False
        if (
            (literal := self.expect('->'))
            and
            (z := self.expression())
        ):
            return [literal, z]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def _tmp_52(self) -> Optional[NodeType]:
        # _tmp_52: '->' expression
        mark = self.mark()
        cut = False
        if (
            (literal := self.expect('->'))
            and
            (z := self.expression())
        ):
            return [literal, z]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def _tmp_53(self) -> Optional[NodeType]:
        # _tmp_53: NEWLINE INDENT
        mark = self.mark()
        cut = False
        if (
            (newline_ := self.expect('NEWLINE'))
            and
            (indent_ := self.expect('INDENT'))
        ):
            return [newline_, indent_]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def _loop0_54(self) -> Optional[NodeType]:
        # _loop0_54: param_no_default
        mark = self.mark()
        children = []
        cut = False
        while (
            (param_no_default := self.param_no_default())
        ):
            children.append([param_no_default])
            mark = self.mark()
        self.reset(mark)
        if cut: return None
        return children

    @memoize
    def _loop0_55(self) -> Optional[NodeType]:
        # _loop0_55: param_with_default
        mark = self.mark()
        children = []
        cut = False
        while (
            (param_with_default := self.param_with_default())
        ):
            children.append([param_with_default])
            mark = self.mark()
        self.reset(mark)
        if cut: return None
        return children

    @memoize
    def _loop0_56(self) -> Optional[NodeType]:
        # _loop0_56: param_with_default
        mark = self.mark()
        children = []
        cut = False
        while (
            (param_with_default := self.param_with_default())
        ):
            children.append([param_with_default])
            mark = self.mark()
        self.reset(mark)
        if cut: return None
        return children

    @memoize
    def _loop1_57(self) -> Optional[NodeType]:
        # _loop1_57: param_no_default
        mark = self.mark()
        children = []
        cut = False
        while (
            (param_no_default := self.param_no_default())
        ):
            children.append([param_no_default])
            mark = self.mark()
        self.reset(mark)
        if cut: return None
        return children

    @memoize
    def _loop0_58(self) -> Optional[NodeType]:
        # _loop0_58: param_with_default
        mark = self.mark()
        children = []
        cut = False
        while (
            (param_with_default := self.param_with_default())
        ):
            children.append([param_with_default])
            mark = self.mark()
        self.reset(mark)
        if cut: return None
        return children

    @memoize
    def _loop1_59(self) -> Optional[NodeType]:
        # _loop1_59: param_with_default
        mark = self.mark()
        children = []
        cut = False
        while (
            (param_with_default := self.param_with_default())
        ):
            children.append([param_with_default])
            mark = self.mark()
        self.reset(mark)
        if cut: return None
        return children

    @memoize
    def _loop1_60(self) -> Optional[NodeType]:
        # _loop1_60: param_no_default
        mark = self.mark()
        children = []
        cut = False
        while (
            (param_no_default := self.param_no_default())
        ):
            children.append([param_no_default])
            mark = self.mark()
        self.reset(mark)
        if cut: return None
        return children

    @memoize
    def _loop1_61(self) -> Optional[NodeType]:
        # _loop1_61: param_no_default
        mark = self.mark()
        children = []
        cut = False
        while (
            (param_no_default := self.param_no_default())
        ):
            children.append([param_no_default])
            mark = self.mark()
        self.reset(mark)
        if cut: return None
        return children

    @memoize
    def _loop0_62(self) -> Optional[NodeType]:
        # _loop0_62: param_no_default
        mark = self.mark()
        children = []
        cut = False
        while (
            (param_no_default := self.param_no_default())
        ):
            children.append([param_no_default])
            mark = self.mark()
        self.reset(mark)
        if cut: return None
        return children

    @memoize
    def _loop1_63(self) -> Optional[NodeType]:
        # _loop1_63: param_with_default
        mark = self.mark()
        children = []
        cut = False
        while (
            (param_with_default := self.param_with_default())
        ):
            children.append([param_with_default])
            mark = self.mark()
        self.reset(mark)
        if cut: return None
        return children

    @memoize
    def _loop0_64(self) -> Optional[NodeType]:
        # _loop0_64: param_no_default
        mark = self.mark()
        children = []
        cut = False
        while (
            (param_no_default := self.param_no_default())
        ):
            children.append([param_no_default])
            mark = self.mark()
        self.reset(mark)
        if cut: return None
        return children

    @memoize
    def _loop1_65(self) -> Optional[NodeType]:
        # _loop1_65: param_with_default
        mark = self.mark()
        children = []
        cut = False
        while (
            (param_with_default := self.param_with_default())
        ):
            children.append([param_with_default])
            mark = self.mark()
        self.reset(mark)
        if cut: return None
        return children

    @memoize
    def _loop0_66(self) -> Optional[NodeType]:
        # _loop0_66: param_maybe_default
        mark = self.mark()
        children = []
        cut = False
        while (
            (param_maybe_default := self.param_maybe_default())
        ):
            children.append([param_maybe_default])
            mark = self.mark()
        self.reset(mark)
        if cut: return None
        return children

    @memoize
    def _loop1_67(self) -> Optional[NodeType]:
        # _loop1_67: param_maybe_default
        mark = self.mark()
        children = []
        cut = False
        while (
            (param_maybe_default := self.param_maybe_default())
        ):
            children.append([param_maybe_default])
            mark = self.mark()
        self.reset(mark)
        if cut: return None
        return children

    @memoize
    def _loop1_68(self) -> Optional[NodeType]:
        # _loop1_68: ('@' named_expression NEWLINE)
        mark = self.mark()
        children = []
        cut = False
        while (
            (_tmp_141 := self._tmp_141())
        ):
            children.append([_tmp_141])
            mark = self.mark()
        self.reset(mark)
        if cut: return None
        return children

    @memoize
    def _tmp_69(self) -> Optional[NodeType]:
        # _tmp_69: '(' arguments? ')'
        mark = self.mark()
        cut = False
        if (
            (literal := self.expect('('))
            and
            (z := self.arguments(),)
            and
            (literal_1 := self.expect(')'))
        ):
            return [literal, z, literal_1]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def _loop0_71(self) -> Optional[NodeType]:
        # _loop0_71: ',' star_expression
        mark = self.mark()
        children = []
        cut = False
        while (
            (literal := self.expect(','))
            and
            (elem := self.star_expression())
        ):
            children.append([literal, elem])
            mark = self.mark()
        self.reset(mark)
        if cut: return None
        return children

    @memoize
    def _gather_70(self) -> Optional[NodeType]:
        # _gather_70: star_expression _loop0_71
        mark = self.mark()
        cut = False
        if (
            (elem := self.star_expression()) is not None
            and
            (seq := self._loop0_71()) is not None
        ):
            return [elem] + seq
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def _loop1_72(self) -> Optional[NodeType]:
        # _loop1_72: (',' star_expression)
        mark = self.mark()
        children = []
        cut = False
        while (
            (_tmp_142 := self._tmp_142())
        ):
            children.append([_tmp_142])
            mark = self.mark()
        self.reset(mark)
        if cut: return None
        return children

    @memoize
    def _loop0_74(self) -> Optional[NodeType]:
        # _loop0_74: ',' star_named_expression
        mark = self.mark()
        children = []
        cut = False
        while (
            (literal := self.expect(','))
            and
            (elem := self.star_named_expression())
        ):
            children.append([literal, elem])
            mark = self.mark()
        self.reset(mark)
        if cut: return None
        return children

    @memoize
    def _gather_73(self) -> Optional[NodeType]:
        # _gather_73: star_named_expression _loop0_74
        mark = self.mark()
        cut = False
        if (
            (elem := self.star_named_expression()) is not None
            and
            (seq := self._loop0_74()) is not None
        ):
            return [elem] + seq
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def _loop1_75(self) -> Optional[NodeType]:
        # _loop1_75: (',' expression)
        mark = self.mark()
        children = []
        cut = False
        while (
            (_tmp_143 := self._tmp_143())
        ):
            children.append([_tmp_143])
            mark = self.mark()
        self.reset(mark)
        if cut: return None
        return children

    @memoize
    def _loop0_76(self) -> Optional[NodeType]:
        # _loop0_76: lambda_param_no_default
        mark = self.mark()
        children = []
        cut = False
        while (
            (lambda_param_no_default := self.lambda_param_no_default())
        ):
            children.append([lambda_param_no_default])
            mark = self.mark()
        self.reset(mark)
        if cut: return None
        return children

    @memoize
    def _loop0_77(self) -> Optional[NodeType]:
        # _loop0_77: lambda_param_with_default
        mark = self.mark()
        children = []
        cut = False
        while (
            (lambda_param_with_default := self.lambda_param_with_default())
        ):
            children.append([lambda_param_with_default])
            mark = self.mark()
        self.reset(mark)
        if cut: return None
        return children

    @memoize
    def _loop0_78(self) -> Optional[NodeType]:
        # _loop0_78: lambda_param_with_default
        mark = self.mark()
        children = []
        cut = False
        while (
            (lambda_param_with_default := self.lambda_param_with_default())
        ):
            children.append([lambda_param_with_default])
            mark = self.mark()
        self.reset(mark)
        if cut: return None
        return children

    @memoize
    def _loop1_79(self) -> Optional[NodeType]:
        # _loop1_79: lambda_param_no_default
        mark = self.mark()
        children = []
        cut = False
        while (
            (lambda_param_no_default := self.lambda_param_no_default())
        ):
            children.append([lambda_param_no_default])
            mark = self.mark()
        self.reset(mark)
        if cut: return None
        return children

    @memoize
    def _loop0_80(self) -> Optional[NodeType]:
        # _loop0_80: lambda_param_with_default
        mark = self.mark()
        children = []
        cut = False
        while (
            (lambda_param_with_default := self.lambda_param_with_default())
        ):
            children.append([lambda_param_with_default])
            mark = self.mark()
        self.reset(mark)
        if cut: return None
        return children

    @memoize
    def _loop1_81(self) -> Optional[NodeType]:
        # _loop1_81: lambda_param_with_default
        mark = self.mark()
        children = []
        cut = False
        while (
            (lambda_param_with_default := self.lambda_param_with_default())
        ):
            children.append([lambda_param_with_default])
            mark = self.mark()
        self.reset(mark)
        if cut: return None
        return children

    @memoize
    def _loop1_82(self) -> Optional[NodeType]:
        # _loop1_82: lambda_param_no_default
        mark = self.mark()
        children = []
        cut = False
        while (
            (lambda_param_no_default := self.lambda_param_no_default())
        ):
            children.append([lambda_param_no_default])
            mark = self.mark()
        self.reset(mark)
        if cut: return None
        return children

    @memoize
    def _loop1_83(self) -> Optional[NodeType]:
        # _loop1_83: lambda_param_no_default
        mark = self.mark()
        children = []
        cut = False
        while (
            (lambda_param_no_default := self.lambda_param_no_default())
        ):
            children.append([lambda_param_no_default])
            mark = self.mark()
        self.reset(mark)
        if cut: return None
        return children

    @memoize
    def _loop0_84(self) -> Optional[NodeType]:
        # _loop0_84: lambda_param_no_default
        mark = self.mark()
        children = []
        cut = False
        while (
            (lambda_param_no_default := self.lambda_param_no_default())
        ):
            children.append([lambda_param_no_default])
            mark = self.mark()
        self.reset(mark)
        if cut: return None
        return children

    @memoize
    def _loop1_85(self) -> Optional[NodeType]:
        # _loop1_85: lambda_param_with_default
        mark = self.mark()
        children = []
        cut = False
        while (
            (lambda_param_with_default := self.lambda_param_with_default())
        ):
            children.append([lambda_param_with_default])
            mark = self.mark()
        self.reset(mark)
        if cut: return None
        return children

    @memoize
    def _loop0_86(self) -> Optional[NodeType]:
        # _loop0_86: lambda_param_no_default
        mark = self.mark()
        children = []
        cut = False
        while (
            (lambda_param_no_default := self.lambda_param_no_default())
        ):
            children.append([lambda_param_no_default])
            mark = self.mark()
        self.reset(mark)
        if cut: return None
        return children

    @memoize
    def _loop1_87(self) -> Optional[NodeType]:
        # _loop1_87: lambda_param_with_default
        mark = self.mark()
        children = []
        cut = False
        while (
            (lambda_param_with_default := self.lambda_param_with_default())
        ):
            children.append([lambda_param_with_default])
            mark = self.mark()
        self.reset(mark)
        if cut: return None
        return children

    @memoize
    def _loop0_88(self) -> Optional[NodeType]:
        # _loop0_88: lambda_param_maybe_default
        mark = self.mark()
        children = []
        cut = False
        while (
            (lambda_param_maybe_default := self.lambda_param_maybe_default())
        ):
            children.append([lambda_param_maybe_default])
            mark = self.mark()
        self.reset(mark)
        if cut: return None
        return children

    @memoize
    def _loop1_89(self) -> Optional[NodeType]:
        # _loop1_89: lambda_param_maybe_default
        mark = self.mark()
        children = []
        cut = False
        while (
            (lambda_param_maybe_default := self.lambda_param_maybe_default())
        ):
            children.append([lambda_param_maybe_default])
            mark = self.mark()
        self.reset(mark)
        if cut: return None
        return children

    @memoize
    def _loop1_90(self) -> Optional[NodeType]:
        # _loop1_90: ('or' conjunction)
        mark = self.mark()
        children = []
        cut = False
        while (
            (_tmp_144 := self._tmp_144())
        ):
            children.append([_tmp_144])
            mark = self.mark()
        self.reset(mark)
        if cut: return None
        return children

    @memoize
    def _loop1_91(self) -> Optional[NodeType]:
        # _loop1_91: ('and' inversion)
        mark = self.mark()
        children = []
        cut = False
        while (
            (_tmp_145 := self._tmp_145())
        ):
            children.append([_tmp_145])
            mark = self.mark()
        self.reset(mark)
        if cut: return None
        return children

    @memoize
    def _loop1_92(self) -> Optional[NodeType]:
        # _loop1_92: compare_op_bitwise_or_pair
        mark = self.mark()
        children = []
        cut = False
        while (
            (compare_op_bitwise_or_pair := self.compare_op_bitwise_or_pair())
        ):
            children.append([compare_op_bitwise_or_pair])
            mark = self.mark()
        self.reset(mark)
        if cut: return None
        return children

    @memoize
    def _loop0_94(self) -> Optional[NodeType]:
        # _loop0_94: ',' slice
        mark = self.mark()
        children = []
        cut = False
        while (
            (literal := self.expect(','))
            and
            (elem := self.slice())
        ):
            children.append([literal, elem])
            mark = self.mark()
        self.reset(mark)
        if cut: return None
        return children

    @memoize
    def _gather_93(self) -> Optional[NodeType]:
        # _gather_93: slice _loop0_94
        mark = self.mark()
        cut = False
        if (
            (elem := self.slice()) is not None
            and
            (seq := self._loop0_94()) is not None
        ):
            return [elem] + seq
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def _tmp_95(self) -> Optional[NodeType]:
        # _tmp_95: ':' expression?
        mark = self.mark()
        cut = False
        if (
            (literal := self.expect(':'))
            and
            (d := self.expression(),)
        ):
            return [literal, d]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def _tmp_96(self) -> Optional[NodeType]:
        # _tmp_96: tuple | group | genexp
        mark = self.mark()
        cut = False
        if (
            (tuple := self.tuple())
        ):
            return [tuple]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (group := self.group())
        ):
            return [group]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (genexp := self.genexp())
        ):
            return [genexp]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def _tmp_97(self) -> Optional[NodeType]:
        # _tmp_97: list | listcomp
        mark = self.mark()
        cut = False
        if (
            (list := self.list())
        ):
            return [list]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (listcomp := self.listcomp())
        ):
            return [listcomp]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def _tmp_98(self) -> Optional[NodeType]:
        # _tmp_98: dict | set | dictcomp | setcomp
        mark = self.mark()
        cut = False
        if (
            (dict := self.dict())
        ):
            return [dict]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (set := self.set())
        ):
            return [set]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (dictcomp := self.dictcomp())
        ):
            return [dictcomp]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (setcomp := self.setcomp())
        ):
            return [setcomp]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def _loop1_99(self) -> Optional[NodeType]:
        # _loop1_99: STRING
        mark = self.mark()
        children = []
        cut = False
        while (
            (string_ := self.string())
        ):
            children.append([string_])
            mark = self.mark()
        self.reset(mark)
        if cut: return None
        return children

    @memoize
    def _tmp_100(self) -> Optional[NodeType]:
        # _tmp_100: star_named_expression ',' star_named_expressions?
        mark = self.mark()
        cut = False
        if (
            (y := self.star_named_expression())
            and
            (literal := self.expect(','))
            and
            (z := self.star_named_expressions(),)
        ):
            return [y, literal, z]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def _tmp_101(self) -> Optional[NodeType]:
        # _tmp_101: yield_expr | named_expression
        mark = self.mark()
        cut = False
        if (
            (yield_expr := self.yield_expr())
        ):
            return [yield_expr]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (named_expression := self.named_expression())
        ):
            return [named_expression]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def _loop0_103(self) -> Optional[NodeType]:
        # _loop0_103: ',' double_starred_kvpair
        mark = self.mark()
        children = []
        cut = False
        while (
            (literal := self.expect(','))
            and
            (elem := self.double_starred_kvpair())
        ):
            children.append([literal, elem])
            mark = self.mark()
        self.reset(mark)
        if cut: return None
        return children

    @memoize
    def _gather_102(self) -> Optional[NodeType]:
        # _gather_102: double_starred_kvpair _loop0_103
        mark = self.mark()
        cut = False
        if (
            (elem := self.double_starred_kvpair()) is not None
            and
            (seq := self._loop0_103()) is not None
        ):
            return [elem] + seq
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def _loop1_104(self) -> Optional[NodeType]:
        # _loop1_104: for_if_clause
        mark = self.mark()
        children = []
        cut = False
        while (
            (for_if_clause := self.for_if_clause())
        ):
            children.append([for_if_clause])
            mark = self.mark()
        self.reset(mark)
        if cut: return None
        return children

    @memoize
    def _loop0_105(self) -> Optional[NodeType]:
        # _loop0_105: ('if' disjunction)
        mark = self.mark()
        children = []
        cut = False
        while (
            (_tmp_146 := self._tmp_146())
        ):
            children.append([_tmp_146])
            mark = self.mark()
        self.reset(mark)
        if cut: return None
        return children

    @memoize
    def _loop0_106(self) -> Optional[NodeType]:
        # _loop0_106: ('if' disjunction)
        mark = self.mark()
        children = []
        cut = False
        while (
            (_tmp_147 := self._tmp_147())
        ):
            children.append([_tmp_147])
            mark = self.mark()
        self.reset(mark)
        if cut: return None
        return children

    @memoize
    def _loop0_108(self) -> Optional[NodeType]:
        # _loop0_108: ',' (starred_expression | named_expression !'=')
        mark = self.mark()
        children = []
        cut = False
        while (
            (literal := self.expect(','))
            and
            (elem := self._tmp_148())
        ):
            children.append([literal, elem])
            mark = self.mark()
        self.reset(mark)
        if cut: return None
        return children

    @memoize
    def _gather_107(self) -> Optional[NodeType]:
        # _gather_107: (starred_expression | named_expression !'=') _loop0_108
        mark = self.mark()
        cut = False
        if (
            (elem := self._tmp_148()) is not None
            and
            (seq := self._loop0_108()) is not None
        ):
            return [elem] + seq
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def _tmp_109(self) -> Optional[NodeType]:
        # _tmp_109: ',' kwargs
        mark = self.mark()
        cut = False
        if (
            (literal := self.expect(','))
            and
            (kwargs := self.kwargs())
        ):
            return [literal, kwargs]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def _loop0_111(self) -> Optional[NodeType]:
        # _loop0_111: ',' kwarg_or_starred
        mark = self.mark()
        children = []
        cut = False
        while (
            (literal := self.expect(','))
            and
            (elem := self.kwarg_or_starred())
        ):
            children.append([literal, elem])
            mark = self.mark()
        self.reset(mark)
        if cut: return None
        return children

    @memoize
    def _gather_110(self) -> Optional[NodeType]:
        # _gather_110: kwarg_or_starred _loop0_111
        mark = self.mark()
        cut = False
        if (
            (elem := self.kwarg_or_starred()) is not None
            and
            (seq := self._loop0_111()) is not None
        ):
            return [elem] + seq
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def _loop0_113(self) -> Optional[NodeType]:
        # _loop0_113: ',' kwarg_or_double_starred
        mark = self.mark()
        children = []
        cut = False
        while (
            (literal := self.expect(','))
            and
            (elem := self.kwarg_or_double_starred())
        ):
            children.append([literal, elem])
            mark = self.mark()
        self.reset(mark)
        if cut: return None
        return children

    @memoize
    def _gather_112(self) -> Optional[NodeType]:
        # _gather_112: kwarg_or_double_starred _loop0_113
        mark = self.mark()
        cut = False
        if (
            (elem := self.kwarg_or_double_starred()) is not None
            and
            (seq := self._loop0_113()) is not None
        ):
            return [elem] + seq
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def _loop0_115(self) -> Optional[NodeType]:
        # _loop0_115: ',' kwarg_or_starred
        mark = self.mark()
        children = []
        cut = False
        while (
            (literal := self.expect(','))
            and
            (elem := self.kwarg_or_starred())
        ):
            children.append([literal, elem])
            mark = self.mark()
        self.reset(mark)
        if cut: return None
        return children

    @memoize
    def _gather_114(self) -> Optional[NodeType]:
        # _gather_114: kwarg_or_starred _loop0_115
        mark = self.mark()
        cut = False
        if (
            (elem := self.kwarg_or_starred()) is not None
            and
            (seq := self._loop0_115()) is not None
        ):
            return [elem] + seq
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def _loop0_117(self) -> Optional[NodeType]:
        # _loop0_117: ',' kwarg_or_double_starred
        mark = self.mark()
        children = []
        cut = False
        while (
            (literal := self.expect(','))
            and
            (elem := self.kwarg_or_double_starred())
        ):
            children.append([literal, elem])
            mark = self.mark()
        self.reset(mark)
        if cut: return None
        return children

    @memoize
    def _gather_116(self) -> Optional[NodeType]:
        # _gather_116: kwarg_or_double_starred _loop0_117
        mark = self.mark()
        cut = False
        if (
            (elem := self.kwarg_or_double_starred()) is not None
            and
            (seq := self._loop0_117()) is not None
        ):
            return [elem] + seq
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def _loop0_118(self) -> Optional[NodeType]:
        # _loop0_118: (',' star_target)
        mark = self.mark()
        children = []
        cut = False
        while (
            (_tmp_149 := self._tmp_149())
        ):
            children.append([_tmp_149])
            mark = self.mark()
        self.reset(mark)
        if cut: return None
        return children

    @memoize
    def _loop0_120(self) -> Optional[NodeType]:
        # _loop0_120: ',' star_target
        mark = self.mark()
        children = []
        cut = False
        while (
            (literal := self.expect(','))
            and
            (elem := self.star_target())
        ):
            children.append([literal, elem])
            mark = self.mark()
        self.reset(mark)
        if cut: return None
        return children

    @memoize
    def _gather_119(self) -> Optional[NodeType]:
        # _gather_119: star_target _loop0_120
        mark = self.mark()
        cut = False
        if (
            (elem := self.star_target()) is not None
            and
            (seq := self._loop0_120()) is not None
        ):
            return [elem] + seq
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def _tmp_121(self) -> Optional[NodeType]:
        # _tmp_121: !'*' star_target
        mark = self.mark()
        cut = False
        if (
            self.negative_lookahead(self.expect, '*')
            and
            (star_target := self.star_target())
        ):
            return [star_target]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def _loop0_123(self) -> Optional[NodeType]:
        # _loop0_123: ',' del_target
        mark = self.mark()
        children = []
        cut = False
        while (
            (literal := self.expect(','))
            and
            (elem := self.del_target())
        ):
            children.append([literal, elem])
            mark = self.mark()
        self.reset(mark)
        if cut: return None
        return children

    @memoize
    def _gather_122(self) -> Optional[NodeType]:
        # _gather_122: del_target _loop0_123
        mark = self.mark()
        cut = False
        if (
            (elem := self.del_target()) is not None
            and
            (seq := self._loop0_123()) is not None
        ):
            return [elem] + seq
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def _loop0_125(self) -> Optional[NodeType]:
        # _loop0_125: ',' target
        mark = self.mark()
        children = []
        cut = False
        while (
            (literal := self.expect(','))
            and
            (elem := self.target())
        ):
            children.append([literal, elem])
            mark = self.mark()
        self.reset(mark)
        if cut: return None
        return children

    @memoize
    def _gather_124(self) -> Optional[NodeType]:
        # _gather_124: target _loop0_125
        mark = self.mark()
        cut = False
        if (
            (elem := self.target()) is not None
            and
            (seq := self._loop0_125()) is not None
        ):
            return [elem] + seq
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def _tmp_126(self) -> Optional[NodeType]:
        # _tmp_126: args | expression for_if_clauses
        mark = self.mark()
        cut = False
        if (
            (args := self.args())
        ):
            return [args]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (expression := self.expression())
            and
            (for_if_clauses := self.for_if_clauses())
        ):
            return [expression, for_if_clauses]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def _loop0_127(self) -> Optional[NodeType]:
        # _loop0_127: star_named_expressions
        mark = self.mark()
        children = []
        cut = False
        while (
            (star_named_expressions := self.star_named_expressions())
        ):
            children.append([star_named_expressions])
            mark = self.mark()
        self.reset(mark)
        if cut: return None
        return children

    @memoize
    def _loop0_128(self) -> Optional[NodeType]:
        # _loop0_128: (star_targets '=')
        mark = self.mark()
        children = []
        cut = False
        while (
            (_tmp_150 := self._tmp_150())
        ):
            children.append([_tmp_150])
            mark = self.mark()
        self.reset(mark)
        if cut: return None
        return children

    @memoize
    def _loop0_129(self) -> Optional[NodeType]:
        # _loop0_129: (star_targets '=')
        mark = self.mark()
        children = []
        cut = False
        while (
            (_tmp_151 := self._tmp_151())
        ):
            children.append([_tmp_151])
            mark = self.mark()
        self.reset(mark)
        if cut: return None
        return children

    @memoize
    def _tmp_130(self) -> Optional[NodeType]:
        # _tmp_130: yield_expr | star_expressions
        mark = self.mark()
        cut = False
        if (
            (yield_expr := self.yield_expr())
        ):
            return [yield_expr]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (star_expressions := self.star_expressions())
        ):
            return [star_expressions]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def _tmp_131(self) -> Optional[NodeType]:
        # _tmp_131: '[' | '(' | '{'
        mark = self.mark()
        cut = False
        if (
            (literal := self.expect('['))
        ):
            return [literal]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (literal := self.expect('('))
        ):
            return [literal]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (literal := self.expect('{'))
        ):
            return [literal]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def _loop0_132(self) -> Optional[NodeType]:
        # _loop0_132: param_no_default
        mark = self.mark()
        children = []
        cut = False
        while (
            (param_no_default := self.param_no_default())
        ):
            children.append([param_no_default])
            mark = self.mark()
        self.reset(mark)
        if cut: return None
        return children

    @memoize
    def _tmp_133(self) -> Optional[NodeType]:
        # _tmp_133: slash_with_default | param_with_default+
        mark = self.mark()
        cut = False
        if (
            (slash_with_default := self.slash_with_default())
        ):
            return [slash_with_default]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (_loop1_152 := self._loop1_152())
        ):
            return [_loop1_152]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def _loop0_134(self) -> Optional[NodeType]:
        # _loop0_134: lambda_param_no_default
        mark = self.mark()
        children = []
        cut = False
        while (
            (lambda_param_no_default := self.lambda_param_no_default())
        ):
            children.append([lambda_param_no_default])
            mark = self.mark()
        self.reset(mark)
        if cut: return None
        return children

    @memoize
    def _tmp_135(self) -> Optional[NodeType]:
        # _tmp_135: lambda_slash_with_default | lambda_param_with_default+
        mark = self.mark()
        cut = False
        if (
            (lambda_slash_with_default := self.lambda_slash_with_default())
        ):
            return [lambda_slash_with_default]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (_loop1_153 := self._loop1_153())
        ):
            return [_loop1_153]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def _tmp_136(self) -> Optional[NodeType]:
        # _tmp_136: ')' | ',' (')' | '**')
        mark = self.mark()
        cut = False
        if (
            (literal := self.expect(')'))
        ):
            return [literal]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (literal := self.expect(','))
            and
            (_tmp_154 := self._tmp_154())
        ):
            return [literal, _tmp_154]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def _tmp_137(self) -> Optional[NodeType]:
        # _tmp_137: ':' | ',' (':' | '**')
        mark = self.mark()
        cut = False
        if (
            (literal := self.expect(':'))
        ):
            return [literal]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (literal := self.expect(','))
            and
            (_tmp_155 := self._tmp_155())
        ):
            return [literal, _tmp_155]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def _tmp_138(self) -> Optional[NodeType]:
        # _tmp_138: star_targets '='
        mark = self.mark()
        cut = False
        if (
            (z := self.star_targets())
            and
            (literal := self.expect('='))
        ):
            return [z, literal]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def _tmp_139(self) -> Optional[NodeType]:
        # _tmp_139: '.' | '...'
        mark = self.mark()
        cut = False
        if (
            (literal := self.expect('.'))
        ):
            return [literal]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (literal := self.expect('...'))
        ):
            return [literal]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def _tmp_140(self) -> Optional[NodeType]:
        # _tmp_140: '.' | '...'
        mark = self.mark()
        cut = False
        if (
            (literal := self.expect('.'))
        ):
            return [literal]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (literal := self.expect('...'))
        ):
            return [literal]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def _tmp_141(self) -> Optional[NodeType]:
        # _tmp_141: '@' named_expression NEWLINE
        mark = self.mark()
        cut = False
        if (
            (literal := self.expect('@'))
            and
            (f := self.named_expression())
            and
            (newline_ := self.expect('NEWLINE'))
        ):
            return [literal, f, newline_]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def _tmp_142(self) -> Optional[NodeType]:
        # _tmp_142: ',' star_expression
        mark = self.mark()
        cut = False
        if (
            (literal := self.expect(','))
            and
            (c := self.star_expression())
        ):
            return [literal, c]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def _tmp_143(self) -> Optional[NodeType]:
        # _tmp_143: ',' expression
        mark = self.mark()
        cut = False
        if (
            (literal := self.expect(','))
            and
            (c := self.expression())
        ):
            return [literal, c]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def _tmp_144(self) -> Optional[NodeType]:
        # _tmp_144: 'or' conjunction
        mark = self.mark()
        cut = False
        if (
            (keyword := self.expect_keyword('or'))
            and
            (c := self.conjunction())
        ):
            return [keyword, c]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def _tmp_145(self) -> Optional[NodeType]:
        # _tmp_145: 'and' inversion
        mark = self.mark()
        cut = False
        if (
            (keyword := self.expect_keyword('and'))
            and
            (c := self.inversion())
        ):
            return [keyword, c]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def _tmp_146(self) -> Optional[NodeType]:
        # _tmp_146: 'if' disjunction
        mark = self.mark()
        cut = False
        if (
            (keyword := self.expect_keyword('if'))
            and
            (z := self.disjunction())
        ):
            return [keyword, z]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def _tmp_147(self) -> Optional[NodeType]:
        # _tmp_147: 'if' disjunction
        mark = self.mark()
        cut = False
        if (
            (keyword := self.expect_keyword('if'))
            and
            (z := self.disjunction())
        ):
            return [keyword, z]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def _tmp_148(self) -> Optional[NodeType]:
        # _tmp_148: starred_expression | named_expression !'='
        mark = self.mark()
        cut = False
        if (
            (starred_expression := self.starred_expression())
        ):
            return [starred_expression]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (named_expression := self.named_expression())
            and
            self.negative_lookahead(self.expect, '=')
        ):
            return [named_expression]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def _tmp_149(self) -> Optional[NodeType]:
        # _tmp_149: ',' star_target
        mark = self.mark()
        cut = False
        if (
            (literal := self.expect(','))
            and
            (c := self.star_target())
        ):
            return [literal, c]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def _tmp_150(self) -> Optional[NodeType]:
        # _tmp_150: star_targets '='
        mark = self.mark()
        cut = False
        if (
            (star_targets := self.star_targets())
            and
            (literal := self.expect('='))
        ):
            return [star_targets, literal]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def _tmp_151(self) -> Optional[NodeType]:
        # _tmp_151: star_targets '='
        mark = self.mark()
        cut = False
        if (
            (star_targets := self.star_targets())
            and
            (literal := self.expect('='))
        ):
            return [star_targets, literal]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def _loop1_152(self) -> Optional[NodeType]:
        # _loop1_152: param_with_default
        mark = self.mark()
        children = []
        cut = False
        while (
            (param_with_default := self.param_with_default())
        ):
            children.append([param_with_default])
            mark = self.mark()
        self.reset(mark)
        if cut: return None
        return children

    @memoize
    def _loop1_153(self) -> Optional[NodeType]:
        # _loop1_153: lambda_param_with_default
        mark = self.mark()
        children = []
        cut = False
        while (
            (lambda_param_with_default := self.lambda_param_with_default())
        ):
            children.append([lambda_param_with_default])
            mark = self.mark()
        self.reset(mark)
        if cut: return None
        return children

    @memoize
    def _tmp_154(self) -> Optional[NodeType]:
        # _tmp_154: ')' | '**'
        mark = self.mark()
        cut = False
        if (
            (literal := self.expect(')'))
        ):
            return [literal]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (literal := self.expect('**'))
        ):
            return [literal]
        self.reset(mark)
        if cut: return None
        return None

    @memoize
    def _tmp_155(self) -> Optional[NodeType]:
        # _tmp_155: ':' | '**'
        mark = self.mark()
        cut = False
        if (
            (literal := self.expect(':'))
        ):
            return [literal]
        self.reset(mark)
        if cut: return None
        cut = False
        if (
            (literal := self.expect('**'))
        ):
            return [literal]
        self.reset(mark)
        if cut: return None
        return None

    _keywords: Set[str] = {
        'False',
        'None',
        'True',
        'and',
        'as',
        'assert',
        'break',
        'class',
        'continue',
        'def',
        'del',
        'elif',
        'else',
        'except',
        'finally',
        'for',
        'from',
        'global',
        'if',
        'import',
        'in',
        'is',
        'lambda',
        'nonlocal',
        'not',
        'or',
        'pass',
        'raise',
        'return',
        'try',
        'while',
        'with',
        'yield',
    }


if __name__ == '__main__':
    from pegen.parser import simple_parser_main
    simple_parser_main(GeneratedParser)
